

-- Gui to Lua
-- Version: 3.2

-- Instances:

if not game:IsLoaded() then
	game.Loaded:Wait()
end

local Library = {}

-- Random UI Name
local LibraryName = tostring(math.random(100000,200000))..tostring(math.random(100000,200000))..tostring(math.random(100000,200000))


function Library:Drag(obj)
	local UserInputService = game:GetService("UserInputService")

	local gui = obj
	local dragging = false
	local dragStart
	local startPos

	local function update(input)
		local delta = input.Position - dragStart
		gui.Position = UDim2.new(
			startPos.X.Scale, startPos.X.Offset + delta.X,
			startPos.Y.Scale, startPos.Y.Offset + delta.Y
		)
	end

	gui.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = gui.Position

			local conn
			conn = input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
					conn:Disconnect()
				end
			end)
		end
	end)

	gui.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			if dragging then
				update(input)
			end
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			update(input)
		end
	end)
end

function Library:DragMultiple(...)
	local args = {...}
	for _, uiObject in ipairs(args) do
		self:Drag(uiObject)
	end
end

-- Library:DragMultiple(Menu, Topbar, ImageButtonK)



--animations

-- TweenService initialization
local TweenService = game:GetService("TweenService")

-- Fade In (to BackgroundTransparency = 0)
function FadeIn(element, duration)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, {BackgroundTransparency = 0})
	tween:Play()
	return tween
end

-- Fade Out (to BackgroundTransparency = 1)
function FadeOut(element, duration)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, {BackgroundTransparency = 1})
	tween:Play()
	return tween
end

-- Slide to targetPosition (UDim2)
function Slide(element: GuiObject, targetPosition: UDim2, duration: number)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local tween = TweenService:Create(element, tweenInfo, {Position = targetPosition})
	tween:Play()
	return tween
end

-- Scale to targetSize (UDim2)
function Scale(element: GuiObject, targetSize: UDim2, duration: number)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local tween = TweenService:Create(element, tweenInfo, {Size = targetSize})
	tween:Play()
	return tween
end

-- Rotate to targetRotation (degrees)
function Rotate(element, targetRotation, duration)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, {Rotation = targetRotation})
	tween:Play()
	return tween
end

-- Pulse effect (scales up and down repeatedly)
function Pulse(element, scaleFactor, duration)
	scaleFactor = scaleFactor or 1.2
	local originalSize = element.Size
	local tweenInfo = TweenInfo.new(duration / 2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
	local tween = TweenService:Create(element, tweenInfo, {
		Size = UDim2.new(
			originalSize.X.Scale * scaleFactor, originalSize.X.Offset,
			originalSize.Y.Scale * scaleFactor, originalSize.Y.Offset
		)
	})
	tween:Play()
	return tween
end

-- Shake effect (rapid position shifts)
function Shake(element, shakeAmount, duration)
	shakeAmount = shakeAmount or 10
	local originalPosition = element.Position
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
	local tween = TweenService:Create(element, tweenInfo, {
		Position = UDim2.new(
			originalPosition.X.Scale, originalPosition.X.Offset + shakeAmount,
			originalPosition.Y.Scale, originalPosition.Y.Offset
		)
	})
	tween:Play()
	return tween
end

-- Change BackgroundColor3 to targetColor
function ColorChange(element, targetColor, duration)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, {BackgroundColor3 = targetColor})
	tween:Play()
end

-- Bounce (vertical movement bounceHeight)
function Bounce(element, bounceHeight, duration)
	bounceHeight = bounceHeight or 0.2
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Bounce, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, {
		Position = UDim2.new(
			element.Position.X.Scale, element.Position.X.Offset,
			bounceHeight, 0
		)
	})
	tween:Play()
end

-- Flip rotation by targetRotation degrees
function Flip(element, targetRotation, duration)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, {Rotation = targetRotation})
	tween:Play()
end

-- Wobble effect (position oscillates by wobbleAmount)
function Wobble(element, wobbleAmount, duration)
	wobbleAmount = wobbleAmount or 10
	local originalPosition = element.Position
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
	local tween = TweenService:Create(element, tweenInfo, {
		Position = UDim2.new(
			originalPosition.X.Scale, originalPosition.X.Offset + wobbleAmount,
			originalPosition.Y.Scale, originalPosition.Y.Offset
		)
	})
	tween:Play()
end

-- Fade and Move together (background transparency & position)
local function FadeAndMove(element, targetTransparency, targetPosition, duration)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, {
		BackgroundTransparency = targetTransparency,
		Position = targetPosition
	})
	tween:Play()
end

-- Rotate and Scale simultaneously
local function RotateAndScale(element, targetRotation, targetSize, duration)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, {
		Rotation = targetRotation,
		Size = targetSize
	})
	tween:Play()
end

-- Flash between two colors repeatedly
local function Flash(element, color1, color2, duration)
	local tweenInfo = TweenInfo.new(duration / 2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, true)
	local tween = TweenService:Create(element, tweenInfo, {BackgroundColor3 = color1})
	tween:Play()
	tween.Completed:Connect(function()
		element.BackgroundColor3 = color2
	end)
end

-- Expand to targetSize
local function Expand(element, targetSize, duration)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local tween = TweenService:Create(element, tweenInfo, {Size = targetSize})
	tween:Play()
end

-- Contract to zero size
local function Contract(element, duration)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
	local tween = TweenService:Create(element, tweenInfo, {Size = UDim2.new(0, 0, 0, 0)})
	tween:Play()
end


--example

--[[

fadeIn(frame, 0.5)
fadeOut(frame, 0.5)
slide(frame, 0.5, UDim2.new(0.5, 0, 0.5, 0))
scale(frame, 0.5, UDim2.new(1, 0, 1, 0))
rotate(frame, 0.5, 180)
pulse(frame, 1, 1.2)
shake(frame, 1, 10)
colorChange(frame, Color3.fromRGB(255, 0, 0), 0.5)
bounce(frame, 0.5, 0.2)
flip(frame, 0.5, 180)
wobble(frame, 1, 10)
fadeAndMove(frame, 0.5, 0.5, UDim2.new(0.5, 0, 0.5, 0))
rotateAndScale(frame, 0.5, 180, UDim2.new(1, 0, 1, 0))
flash(frame, 1.5, Color3.fromRGB(255, 0, 0), Color3.fromRGB(0, 255, 0))
expand(frame, 0.5, UDim2.new(1, 0, 1, 0))
contract(frame, 0.5)


]]--


--OLD

--[[
local TweenService = game:GetService("TweenService")

-- Function to animate opacity (fade in)
local function fadeIn(element, duration)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, { BackgroundTransparency = 0 })
	tween:Play()
end

-- Function to animate opacity (fade out)
local function fadeOut(element, duration)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, { BackgroundTransparency = 1 })
	tween:Play()
end

-- Slide function: Moves an element from one position to another
local function slide(element, duration)
	local targetPosition = UDim2.new(0.5, 0, 0.5, 0) -- Example target position
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, { Position = targetPosition })
	tween:Play()
end

-- Scale function: Changes the size of an element
local function scale(element, duration)
	local targetSize = UDim2.new(1, 0, 1, 0) -- Example target size
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, { Size = targetSize })
	tween:Play()
end

-- Rotate function: Rotates an element around a specified axis
local function rotate(element, duration)
	local targetRotation = 180 -- Example target rotation
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, { Rotation = targetRotation })
	tween:Play()
end

-- Pulse function: Creates a pulsing effect by scaling up and down repeatedly
local function pulse(element, duration)
	local originalSize = element.Size
	local scaleFactor = 1.2 -- Example scale factor
	local tweenInfo = TweenInfo.new(duration / 2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
	local tween = TweenService:Create(element, tweenInfo, { Size = UDim2.new(originalSize.X.Scale * scaleFactor, originalSize.X.Offset, originalSize.Y.Scale * scaleFactor, originalSize.Y.Offset) })
	tween:Play()
end

-- Shake function: Adds a shaking effect by rapidly changing position
local function shake(element, duration)
	local originalPosition = element.Position
	local shakeAmount = 10 -- Example shake amount
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
	local tween = TweenService:Create(element, tweenInfo, { Position = UDim2.new(originalPosition.X.Scale, originalPosition.X.Offset + shakeAmount, originalPosition.Y.Scale, originalPosition.Y.Offset) })
	tween:Play()
end

-- Color Change function: Alters the color of an element
local function colorChange(element, Tarcolor, duration)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, { BackgroundColor3 = Tarcolor })
	tween:Play()
end


-- Bounce function: Moves an element in a bouncing motion
local function bounce(element, duration)
	local bounceHeight = 0.2 -- Example bounce height
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Bounce, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, { Position = UDim2.new(element.Position.X.Scale, element.Position.X.Offset, bounceHeight, 0) })
	tween:Play()
end

-- Flip function: Flips the element around a specified axis
local function flip(element, duration)
	local flipDirection = 180 -- Example flip direction
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, { Rotation = flipDirection })
	tween:Play()
end

-- Wobble function: Applies a wobbling effect to the element
local function wobble(element, duration)
	local originalPosition = element.Position
	local wobbleAmount = 10 -- Example wobble amount
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
	local tween = TweenService:Create(element, tweenInfo, { Position = UDim2.new(originalPosition.X.Scale, originalPosition.X.Offset + wobbleAmount, originalPosition.Y.Scale, originalPosition.Y.Offset) })
	tween:Play()
end

-- Fade and Move function: Combines fading and sliding effects
local function fadeAndMove(element, duration)
	local targetTransparency = 0.5 -- Example target transparency
	local targetPosition = UDim2.new(0.5, 0, 0.5, 0) -- Example target position
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, { BackgroundTransparency = targetTransparency, Position = targetPosition })
	tween:Play()
end

-- Rotate and Scale function: Combines rotation and scaling effects
local function rotateAndScale(element, duration)
	local targetRotation = 180 -- Example target rotation
	local targetSize = UDim2.new(1, 0, 1, 0) -- Example target size
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(element, tweenInfo, { Rotation = targetRotation, Size = targetSize })
	tween:Play()
end

-- Flash function: Creates a flashing effect by changing the color repeatedly
local function flash(element, duration)
	local color1 = Color3.fromRGB(255, 0, 0) -- Example first color
	local color2 = Color3.fromRGB(0, 255, 0) -- Example second color
	local tweenInfo = TweenInfo.new(duration / 2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, true)
	local tween = TweenService:Create(element, tweenInfo, { BackgroundColor3 = color1 })
	tween:Play()
	tween.Completed:Connect(function()
		element.BackgroundColor3 = color2
	end)
end

-- Expand function: Expands the element from its center
local function expand(element, duration)
	local targetSize = UDim2.new(1, 0, 1, 0) -- Example target size
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local tween = TweenService:Create(element, tweenInfo, { Size = targetSize })
	tween:Play()
end

-- Contract function: Contracts the element to its center
local function contract(element, duration)
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
	local tween = TweenService:Create(element, tweenInfo, { Size = UDim2.new(0, 0, 0, 0) })
	tween:Play()
end
]]



--Mains

function Library:Create(xHubName)


	if  game.CoreGui:FindFirstChild(xHubName) then
		game.CoreGui[xHubName]:Destroy()
	end

	local xHubName = xHubName or "Seraph Hub"

	local ScreenGui = Instance.new("ScreenGui")
	local Menu = Instance.new("Frame")
	local UICorner = Instance.new("UICorner")
	local Topbar = Instance.new("Frame")
	local UICorner_2 = Instance.new("UICorner")
	local Title = Instance.new("TextLabel")
	local UIPadding = Instance.new("UIPadding")
	local Minimize = Instance.new("TextButton")
	local UICorner_3 = Instance.new("UICorner")
	local ImageLabel = Instance.new("ImageLabel")
	local UIScale = Instance.new("UIScale")
	local Close = Instance.new("TextButton")
	local UICorner_4 = Instance.new("UICorner")
	local ImageLabel_2 = Instance.new("ImageLabel")
	local UIScale_2 = Instance.new("UIScale")
	local TabHold = Instance.new("Frame")
	local Holder2 = Instance.new("ScrollingFrame")
	local UIListLayout = Instance.new("UIListLayout")
	local UIPadding_2 = Instance.new("UIPadding")
	local ExampleContainer = Instance.new("Frame")
	local PageHold = Instance.new("Folder")

	--load
	local LoadingFrame = Instance.new("Frame")
	local LoadingLabel = Instance.new("TextLabel")
	local LoadingImage = Instance.new("ImageLabel")
	local ProgressBar = Instance.new("Frame")
	local ProgressBackground = Instance.new("Frame")



	local UIStroke = Instance.new("UIStroke")

	UIStroke.Parent = Menu
	UIStroke.Color = Color3.fromRGB(50, 50, 50)
	UIStroke.Thickness = 2

	--close and open mobile

	local ImageButtonK = Instance.new("ImageButton")
	local ImageButtonKCorner = Instance.new("UICorner")

	function ScrollSize()
		Holder2.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y)
	end


	--Properties:
	ScreenGui.Name = xHubName
	ScreenGui.Parent = game.CoreGui
	ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	
	Library:Drag(Menu, Topbar)
	Library:Drag(ImageButtonK)
	
	local originalSize = UDim2.new(0, 525, 0, 318)
	local minimizedSize = UDim2.new(0, 525, 0, 36)
	
	LoadingFrame.Name = "LoadingFrame"
	LoadingFrame.Parent = ScreenGui
	LoadingFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	LoadingFrame.BackgroundTransparency = 0.5
	LoadingFrame.Size = UDim2.new(1, 0, 1, 0)

	LoadingLabel.Name = "LoadingLabel"
	LoadingLabel.Parent = LoadingFrame
	LoadingLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	LoadingLabel.BackgroundTransparency = 1.000
	LoadingLabel.Position = UDim2.new(0.5, -100, 0.5, -50)
	LoadingLabel.Size = UDim2.new(0, 200, 0, 50)
	LoadingLabel.Font = Enum.Font.GothamBold
	LoadingLabel.Text = "Loading."
	LoadingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	LoadingLabel.TextSize = 24.000

	LoadingImage.Name = "LoadingImage"
	LoadingImage.Parent = LoadingFrame
	LoadingImage.BackgroundTransparency = 1.000
	LoadingImage.Position = UDim2.new(0.5, -25, 0.4, -75)
	LoadingImage.Size = UDim2.new(0, 50, 0, 50)
	LoadingImage.Image = "rbxassetid://9559111831"

	ProgressBackground.Name = "ProgressBackground"
	ProgressBackground.Parent = LoadingFrame
	ProgressBackground.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	ProgressBackground.Position = UDim2.new(0.5, -100, 0.6, -10)
	ProgressBackground.Size = UDim2.new(0, 200, 0, 20)

	ProgressBar.Name = "ProgressBar"
	ProgressBar.Parent = ProgressBackground
	ProgressBar.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
	ProgressBar.Size = UDim2.new(0, 0, 1, 0)

	local Loadcorn = Instance.new("UICorner")

	Loadcorn.CornerRadius = UDim.new(0, 5)
	Loadcorn.Parent = ProgressBar

	Loadcorn:Clone().Parent = ProgressBackground
	Loadcorn:Clone().Parent = LoadingLabel
	Loadcorn:Clone().Parent = LoadingFrame


	UIStroke:Clone().Parent = LoadingImage
	UIStroke:Clone().Parent = LoadingLabel
	UIStroke:Clone().Parent = ProgressBar



	local function cycleLoadingText()
		local textArray = {"Loading.", "Loading..", "Loading..."}
		local index = 1
		while LoadingFrame.Parent do
			LoadingLabel.Text = textArray[index]
			index = index % #textArray + 1
			wait(0.5)
		end
	end

	local function animateProgressBar()
		for i = 1, 100 do
			ProgressBar.Size = UDim2.new(i / 100, 0, 1, 0)
			wait(0.04)
		end
	end

	local textCoroutine = coroutine.create(cycleLoadingText)
	local progressCoroutine = coroutine.create(animateProgressBar)

	coroutine.resume(textCoroutine)
	coroutine.resume(progressCoroutine)
	
	Rotate(LoadingImage, 0.5, 4)

	wait(4) -- Simulating loading time

	if LoadingFrame and LoadingFrame.Parent then
		FadeOut(LoadingFrame, 0.3)
		wait(1)
		LoadingFrame:Destroy()
	--	Menu:TweenSize(originalSize, Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.3, true)

	else
		return
			print("Can't open the main gui cuz loading is visible :)")
	end



	Menu.Name = "Menu"
	Menu.Parent = ScreenGui
	Menu.BackgroundColor3 = Color3.fromRGB(29, 29, 29)
	Menu.BorderColor3 = Color3.fromRGB(27, 42, 53)
	Menu.Position = UDim2.new(0.336060435, 0, 0.211180121, 0) --0.336060435, 0, 0.211180121, 0
	Menu.Size = minimizedSize
	for _, child in ipairs(Menu:GetChildren()) do
		if (child:IsA("Frame") or child:IsA("ScrollingFrame")) and child.Name ~= "Topbar" then
			child.Visible = false
		end
	end
	
--	local TweenService = game:GetService("TweenService")

	-- hide all content-frames except Topbar
	for _, child in ipairs(Menu:GetChildren()) do
		if (child:IsA("Frame") or child:IsA("ScrollingFrame")) and child.Name ~= "Topbar" then
			child.Visible = false
		end
	end

	-- prepare tween to expand Menu
	local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local tween = TweenService:Create(Menu, tweenInfo, {Size = originalSize})
	tween:Play()

	-- when expansion finishes, show children
	tween.Completed:Connect(function()
		for _, child in ipairs(Menu:GetChildren()) do
			if (child:IsA("Frame") or child:IsA("ScrollingFrame")) and child.Name ~= "Topbar" then
				child.Visible = true
			end
		end
	end)

	UICorner.CornerRadius = UDim.new(0, 5)
	UICorner.Parent = Menu


	Topbar.Name = "Topbar"
	Topbar.Parent = Menu
	Topbar.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
	Topbar.BorderColor3 = Color3.fromRGB(27, 42, 53)
	Topbar.Size = UDim2.new(0, 519, 0, 36)

	UICorner_2.CornerRadius = UDim.new(0, 5)
	UICorner_2.Parent = Topbar

	Title.Name = "Title"
	Title.Parent = Topbar
	Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Title.BackgroundTransparency = 1.000
	Title.BorderColor3 = Color3.fromRGB(27, 42, 53)
	Title.Position = UDim2.new(0.00192678231, 0, 0, 0)
	Title.Size = UDim2.new(0, 200, 0, 36)
	Title.Font = Enum.Font.GothamMedium
	Title.Text = xHubName
	Title.TextColor3 = Color3.fromRGB(161, 161, 161)
	Title.TextSize = 13.000
	Title.TextXAlignment = Enum.TextXAlignment.Left

	UIPadding.Parent = Title
	UIPadding.PaddingLeft = UDim.new(0, 10)

	Minimize.Name = "Minimize"
	Minimize.Parent = Topbar
	Minimize.BackgroundColor3 = Color3.fromRGB(248, 248, 248)
	Minimize.BackgroundTransparency = 1.000
	Minimize.BorderColor3 = Color3.fromRGB(27, 42, 53)
	Minimize.Position = UDim2.new(0.892100215, 0, 0.194444448, 0)
	Minimize.Selectable = false
	Minimize.Size = UDim2.new(0, 21, 0, 21)
	Minimize.Text = ""
	Minimize.TextTransparency = 1.000

	UICorner_3.CornerRadius = UDim.new(0, 4)
	UICorner_3.Parent = Minimize

	ImageLabel.Parent = Minimize
	ImageLabel.AnchorPoint = Vector2.new(0.5, 0.5)
	ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ImageLabel.BackgroundTransparency = 1.000
	ImageLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
	ImageLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
	ImageLabel.Size = UDim2.new(0, 21, 0, 21)
	ImageLabel.Image = "rbxassetid://7733997870"
	ImageLabel.ImageColor3 = Color3.fromRGB(134, 134, 134)

	UIScale.Parent = ImageLabel
	UIScale.Scale = 0.600

	Close.Name = "Close"
	Close.Parent = Topbar
	Close.BackgroundColor3 = Color3.fromRGB(248, 248, 248)
	Close.BackgroundTransparency = 1.000
	Close.BorderColor3 = Color3.fromRGB(27, 42, 53)
	Close.Position = UDim2.new(0.940269768, 0, 0.194444448, 0)
	Close.Selectable = false
	Close.Size = UDim2.new(0, 21, 0, 21)
	Close.Text = ""
	Close.TextTransparency = 1.000


	UICorner_4.CornerRadius = UDim.new(0, 4)
	UICorner_4.Parent = Close

	ImageLabel_2.Parent = Close
	ImageLabel_2.AnchorPoint = Vector2.new(0.5, 0.5)
	ImageLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ImageLabel_2.BackgroundTransparency = 1.000
	ImageLabel_2.BorderColor3 = Color3.fromRGB(27, 42, 53)
	ImageLabel_2.Position = UDim2.new(0.5, 0, 0.5, 0)
	ImageLabel_2.Size = UDim2.new(0, 21, 0, 21)
	ImageLabel_2.Image = "rbxassetid://7743878857"
	ImageLabel_2.ImageColor3 = Color3.fromRGB(134, 134, 134)

	UIScale_2.Parent = ImageLabel_2
	UIScale_2.Scale = 0.700


	TabHold.Name = "TabHold"
	TabHold.Parent = Menu
	TabHold.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TabHold.BackgroundTransparency = 1.000
	TabHold.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TabHold.BorderSizePixel = 0
	TabHold.Position = UDim2.new(0.00190476188, 0, 0.113207549, 0)
	TabHold.Size = UDim2.new(0, 218, 0, 282)


	Holder2.Name = "Holder"
	Holder2.Parent = TabHold
	Holder2.Active = true
	Holder2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Holder2.BackgroundTransparency = 1.000
	Holder2.BorderColor3 = Color3.fromRGB(27, 42, 53)
	Holder2.Size = UDim2.new(1, 0, 0.996453881, 1)
	Holder2.ZIndex = 3
	Holder2.ScrollBarThickness = 0

	UIListLayout.Parent = Holder2
	UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout.Padding = UDim.new(0, 6)

	UIPadding_2.Parent = Holder2
	UIPadding_2.PaddingTop = UDim.new(0, 10)


	ExampleContainer.Name = "ExampleContainer"
	ExampleContainer.Parent = Menu
	ExampleContainer.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ExampleContainer.BackgroundTransparency = 1.000
	ExampleContainer.BorderColor3 = Color3.fromRGB(27, 42, 53)
	ExampleContainer.Position = UDim2.new(0.425714284, 0, 0.113207549, 0)
	ExampleContainer.Size = UDim2.new(0, 300, 0, 280)

	PageHold.Name = "PageHold"
	PageHold.Parent = ExampleContainer




	UIStroke:Clone().Parent = Topbar
	UIStroke:Clone().Parent = TabHold
	UIStroke:Clone().Parent = ExampleContainer

	local UIGradient = Instance.new("UIGradient")
	UIGradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0.00, Color3.fromRGB(40, 40, 40)),
		ColorSequenceKeypoint.new(1.00, Color3.fromRGB(20, 20, 20))
	}
	UIGradient.Parent = Menu

	local Shadow = Instance.new("Frame")
	local Image = Instance.new("ImageLabel")

	--Properties:

	Shadow.Name = "Shadow"
	Shadow.Parent = Menu
	Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
	Shadow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Shadow.BackgroundTransparency = 1.000
	Shadow.BorderColor3 = Color3.fromRGB(23, 36, 45)
	Shadow.BorderSizePixel = 0
	Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
	Shadow.Size = UDim2.new(1, 35, 1, 35)
	Shadow.ZIndex = 0

	Image.Name = "Image"
	Image.Parent = Shadow
	Image.AnchorPoint = Vector2.new(0.5, 0.5)
	Image.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Image.BackgroundTransparency = 1.000
	Image.BorderColor3 = Color3.fromRGB(27, 42, 53)
	Image.BorderSizePixel = 0
	Image.Position = UDim2.new(0.507476628, 0, 0.509803951, 0)
	Image.Size = UDim2.new(1.60000002, 0, 1.29999995, 0)
	Image.ZIndex = 0
	Image.Image = "rbxassetid://5587865193"
	Image.ImageColor3 = Color3.fromRGB(20, 20, 20)
	Image.ImageTransparency = 0.400



	-- ImageButtonK setup
	ImageButtonK.Name = "ImageButtonK"
	ImageButtonK.Parent = ScreenGui
	ImageButtonK.BackgroundColor3 = Color3.fromRGB(255, 16, 8)
	--	ImageButtonK.BackgroundTransparency = 1.000
	ImageButtonK.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ImageButtonK.BorderSizePixel = 0
	ImageButtonK.Position = UDim2.new(0.219957083, 0, 0.0619834736, 0)
	ImageButtonK.Size = UDim2.new(0.044799991, 0, 0.0651629046, 0)
	ImageButtonK.Image = "rbxassetid://18786441248"
	ImageButtonK.ZIndex = 10
	ImageButtonK.Visible = true

	-- UICorner for ImageButtonK setup
	local ImageButtonKCorner = Instance.new("UICorner")
	ImageButtonKCorner.CornerRadius = UDim.new(0, 12)
	ImageButtonKCorner.Name = "ImageButtonKCorner"
	ImageButtonKCorner.Parent = ImageButtonK

	-- UIAspectRatioConstraint for ImageButtonK setup
	local UIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint")
	UIAspectRatioConstraint.Parent = ImageButtonK
	UIAspectRatioConstraint.AspectRatio = 1.404



	local minimized = false
	local originalSize = Menu.Size
	local minimizedSize = UDim2.new(0, 525, 0, 36)

	Minimize.MouseButton1Click:Connect(function()
		if minimized then
			Menu:TweenSize(originalSize, Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.3, true)

			for _, child in pairs(Menu:GetChildren()) do
				-- Don't hide Topbar or Minimize button
				if (child:IsA("Frame") or child:IsA("ScrollingFrame")) and child.Name ~= "Topbar" then
					child.Visible = true
				end
			end

			ImageLabel.Image = "rbxassetid://7733997870" -- Close icon
		else
			Menu:TweenSize(minimizedSize, Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.3, true)

			for _, child in pairs(Menu:GetChildren()) do
				if (child:IsA("GuiObject") ) and child.Name ~= "Topbar" then
					child.Visible = false
				end
			end

			ImageLabel.Image = "rbxassetid://6153965706" -- Open icon
		end

		minimized = not minimized
	end)


	Close.MouseButton1Click:Connect(function()
		local ui = game.CoreGui:FindFirstChild(xHubName)
		if ui then
			if typeof(FadeOut) == "function" then
				FadeOut(Menu, 0.3)
				FadeOut(Topbar, 0.3)
				FadeOut(Shadow, 0.3)
			end

			print("Destroying " .. xHubName .. "...")
			ui:Destroy()
			print("Destroyed " .. xHubName)
		else
			warn("UI not found: " .. tostring(xHubName))
		end
	end)



	ImageButtonK.MouseButton1Click:Connect(function()


		if Menu.Visible then
			-- Uncomment the desired fade-out effect
			-- fadeOut(Menu, 0.3)  -- Fade out Main frame

			FadeOut(Topbar, 0.3)

			Scale(Menu, minimizedSize, 4)  -- Scale down Main frame
			--rotate(Menu, 0.3)  -- Rotate Main frame
			
			--pulse(Menu, 0.3)  -- Pulse Main frame
			--shake(Menu, 0.3)  -- Shake Main frame
			--colorChange(Menu, 0.3)  -- Change color of Main frame
			--bounce(Menu, 0.3)  -- Bounce Main frame
			--flip(Menu, 0.3)  -- Flip Main frame
			--wobble(Menu, 0.3)  -- Wobble Main frame
			--fadeAndMove(Menu, 0.3)  -- Fade and move Main frame
			--rotateAndScale(Menu, 0.3)  -- Rotate and scale Main frame
			--flash(Menu, 0.3)  -- Flash Main frame
			--expand(Menu, 0.3)  -- Expand Main frame
			--contract(Menu, 0.3)  -- Contract Main frame

			Menu.Visible = false

		else

			-- Uncomment the desired fade-in effect
			--fadeIn(Menu, 0.3)  -- Fade in Main frame

			FadeIn(Topbar, 0.3)

			Scale(Menu, originalSize, 4)  -- Scale up Main frame
			--rotate(Menu, 0.3)  -- Rotate Main frame
			--pulse(Menu, 0.3)  -- Pulse Main frame
			--shake(Menu, 0.3)  -- Shake Main frame
			--colorChange(Menu, 0.3)  -- Change color of Main frame
			--bounce(Menu, 0.3)  -- Bounce Main frame
			--flip(Menu, 0.3)  -- Flip Main frame
			--wobble(Menu, 0.3)  -- Wobble Main frame
		--	fadeAndMove(Menu, 0.3)  -- Fade and move Main frame
			--rotateAndScale(Menu, 0.3)  -- Rotate and scale Main frame
			--flash(Menu, 0.3)  -- Flash Main frame
			--expand(Menu, 0.3)  -- Expand Main frame
			--contract(Menu, 0.3)  -- Contract Main frame

			Menu.Visible = true
		end
	end)




	function Library:ToggleUI()
		local ui = game.CoreGui:FindFirstChild(xHubName)
		if ui then
			ui.Enabled = not ui.Enabled
		end
	end



	function Library:Destroy()
		local ui = game.CoreGui:FindFirstChild(xHubName)
		if ui then
			if typeof(FadeOut) == "function" then
				FadeOut(Menu, 0.3)
				FadeOut(Topbar, 0.3)
				FadeOut(Shadow, 0.3)
			end

			print("Destroying " .. xHubName .. "...")
			ui:Destroy()
			print("Destroyed " .. xHubName)
		else
			warn("UI not found: " .. tostring(xHubName))
		end
	end


	function Library:Tab(TabNam)
		local TabNam = TabNam or "Tab"

		--Tab button

		local Example = Instance.new("TextButton")
		local UICorner = Instance.new("UICorner")
		local TextLabel = Instance.new("TextLabel")

		--Properties:

		Example.Name = TabNam
		Example.Parent = Holder2
		Example.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		Example.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Example.Position = UDim2.new(0.105504587, 0, 0, 0)
		Example.Selectable = false
		Example.Size = UDim2.new(0, 201, 0, 31)
		Example.ZIndex = 6
		Example.AutoButtonColor = false
		Example.TextWrapped = true     

		Example.Text = ""

		UICorner.CornerRadius = UDim.new(0, 5)
		UICorner.Parent = Example

		TextLabel.Parent = Example
		TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		TextLabel.BackgroundTransparency = 1.000
		TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
		TextLabel.Position = UDim2.new(0.0945273638, 0, 0, 0)
		TextLabel.Size = UDim2.new(0, 172, 0, 31)
		TextLabel.ZIndex = 7
		TextLabel.Font = Enum.Font.GothamMedium
		TextLabel.Text = TabNam
		TextLabel.TextColor3 = Color3.fromRGB(193, 193, 193)
		TextLabel.TextSize = 12.000


		-- Gui to Lua
		-- Version: 3.2

		-- Instances:

		local Left = Instance.new("ScrollingFrame")
		local UIListLayout = Instance.new("UIListLayout")
		local ExampleSection = Instance.new("Frame")
		local Title = Instance.new("Frame")
		local TextLabel = Instance.new("TextLabel")
		local UIListLayout_2 = Instance.new("UIListLayout")
		local UIPadding = Instance.new("UIPadding")
		local Holder = Instance.new("Frame")
		local UIListLayout_3 = Instance.new("UIListLayout")
		local UIPadding_2 = Instance.new("UIPadding")


		ScrollSize()

		function Size()
			Left.CanvasSize = UDim2.new(0, 0, 0, (UIListLayout.AbsoluteContentSize.Y + UIListLayout_2.AbsoluteContentSize.Y + UIListLayout_3.AbsoluteContentSize.Y))
		end


		--Properties:


		Left.Name = "Left"
		Left.Parent = PageHold
		Left.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Left.BackgroundTransparency = 1.000
		Left.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Left.Size = UDim2.new(0, 301, 0, 282)
		Left.Visible = false
		Left.ScrollBarThickness = 0

		UIListLayout.Parent = Left
		UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

		ExampleSection.Name = "Section"
		ExampleSection.Parent = Left
		ExampleSection.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		ExampleSection.BackgroundTransparency = 1.000
		ExampleSection.BorderColor3 = Color3.fromRGB(27, 42, 53)
		ExampleSection.Size = UDim2.new(0, 301, 0, 277)

		Title.Name = "Title"
		Title.Parent = ExampleSection
		Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Title.BackgroundTransparency = 1.000
		Title.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Title.LayoutOrder = -1
		Title.Size = UDim2.new(0, 255, 0, 29)

		TextLabel.Parent = Title
		TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		TextLabel.BackgroundTransparency = 1.000
		TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
		TextLabel.Size = UDim2.new(0, 255, 0, 34)
		TextLabel.Font = Enum.Font.Gotham
		TextLabel.Text = TabNam
		TextLabel.TextColor3 = Color3.fromRGB(130, 130, 130)
		TextLabel.TextSize = 12.000
		TextLabel.TextXAlignment = Enum.TextXAlignment.Left

		UIListLayout_2.Parent = ExampleSection
		UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder

		UIPadding.Parent = ExampleSection
		UIPadding.PaddingLeft = UDim.new(0, 20)

		Holder.Name = "Holder"
		Holder.Parent = ExampleSection
		Holder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Holder.BackgroundTransparency = 1.000
		Holder.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Holder.Position = UDim2.new(-0.00355871883, 0, 0.104693137, 0)
		Holder.Size = UDim2.new(1.01067615, 0, 0.870036125, 0)

		UIListLayout_3.Parent = Holder
		UIListLayout_3.SortOrder = Enum.SortOrder.LayoutOrder
		UIListLayout_3.Padding = UDim.new(0, 5)

		UIPadding_2.Parent = Left
		UIPadding_2.PaddingTop = UDim.new(0, 5)


		Size()
		Holder.ChildAdded:Connect(Size)
		Holder.ChildRemoved:Connect(Size)


		-- Store the original color
		local originalBackgroundColor = Example.BackgroundColor3

		-- Connect button click to activation function
		Example.MouseButton1Click:Connect(function()
			Size()
			-- Hide all other tab frames and reset their button colors
			for _, frame in pairs(PageHold:GetChildren()) do
				if frame:IsA("ScrollingFrame") then
					frame.Visible = false
				end
			end
			for _, button in pairs(Holder2:GetChildren()) do
				if button:IsA("TextButton") then
					button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
					button.TextColor3 = Color3.fromRGB(193, 193, 193)
				end
			end
			-- Show the selected tab frame
			Left.Visible = true
			Example.TextColor3 = Color3.fromRGB(4, 34, 40)
			Example.BackgroundColor3 = Color3.fromRGB(20, 115, 215)
		end)

		return Holder
	end



	function Library:ShowNotify(title, text, duration)

		local ScreenGuiM = Instance.new("ScreenGui")
		local Notification = Instance.new("Frame")
		local NotificationCorner = Instance.new("UICorner")
		local Title = Instance.new("TextLabel")
		local Text = Instance.new("TextLabel")


		ScreenGuiM.Name = title
		ScreenGuiM.Parent =  game.CoreGui

		ScreenGuiM.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		ScreenGuiM.ResetOnSpawn = false


		-- Set propertie
		Notification.Name = "Notification"
		Notification.Parent = ScreenGui
		Notification.BackgroundColor3 = Color3.fromRGB(29, 29, 29)
		Notification.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Notification.Position = UDim2.new(0.5, -150, 0.1, 0)
		Notification.Size = UDim2.new(0, 300, 0, 100)
		Notification.AnchorPoint = Vector2.new(0.5, 0)


		NotificationCorner.CornerRadius = UDim.new(0, 5)
		NotificationCorner.Parent = Notification


		Title.Name = "Title"
		Title.Parent = Notification
		Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Title.BackgroundTransparency = 1.000
		Title.Position = UDim2.new(0.05, 0, 0.1, 0)
		Title.Size = UDim2.new(0.9, 0, 0.3, 0)
		Title.Font = Enum.Font.GothamMedium
		Title.Text = title
		Title.TextColor3 = Color3.fromRGB(255, 255, 255)
		Title.TextSize = 18.000
		Title.TextXAlignment = Enum.TextXAlignment.Left


		Text.Name = "Text"
		Text.Parent = Notification
		Text.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Text.BackgroundTransparency = 1.000
		Text.Position = UDim2.new(0.05, 0, 0.5, 0)
		Text.Size = UDim2.new(0.9, 0, 0.4, 0)
		Text.Font = Enum.Font.Gotham
		Text.Text = text
		Text.TextColor3 = Color3.fromRGB(255, 255, 255)
		Text.TextSize = 14.000
		Text.TextWrapped = true
		Text.TextXAlignment = Enum.TextXAlignment.Left


	--	Slide(Notification, 0.5)
		FadeIn(Notification, 0.5)
		
		Slide(Notification, UDim2.new(0.5, 0, 0.5, 0), 0.5)

		wait(duration)


		wait(0.3)
		FadeOut(Notification, 0.5)
		wait(0.5)
		Notification:Destroy()
		ScreenGuiM:Destroy()

	end

	local HttpService = game:GetService("HttpService")

	function Library:SaveConfig(name, data)
		if not writefile or not isfolder or not makefolder then
			return false, "Your executor does not support filesystem operations"
		end

		local ok, jsonOrErr = pcall(function()
			return HttpService:JSONEncode(data)
		end)
		if not ok then
			return false, "Failed to encode data: " .. tostring(jsonOrErr)
		end

		if not isfolder("Seraph_Hub_Configs") then
			makefolder("Seraph_Hub_Configs")
		end

		local path = ("Seraph_Hub_Configs/%s.json"):format(name)
		local writeOk, writeErr = pcall(function()
			writefile(path, jsonOrErr)
		end)
		if not writeOk then
			return false, "Failed to write file: " .. tostring(writeErr)
		end

		return true
	end

	function Library:LoadConfig(name)
		if not readfile or not isfile then
			return nil
		end

		local path = ("Seraph_Hub_Configs/%s.json"):format(name)
		if not isfile(path) then
			return nil
		end

		local ok, contentOrErr = pcall(function()
			return readfile(path)
		end)
		if not ok then
			warn("Failed to read config file:", contentOrErr)
			return nil
		end

		local decodeOk, dataOrErr = pcall(function()
			return HttpService:JSONDecode(contentOrErr)
		end)
		if not decodeOk then
			warn("Failed to decode config JSON:", dataOrErr)
			return nil
		end

		return dataOrErr
	end



	function Library:Button(Parent, ButName, Callback)
		local ButName = ButName or "Button"
		local ButtonFunction = {}
		local Callback = Callback or function() end

		local Button = Instance.new("TextButton")
		local UICorner = Instance.new("UICorner")
		local TextLabel = Instance.new("TextLabel")
		local UIPadding = Instance.new("UIPadding")
		local Status = Instance.new("Frame")
		local ActualThing = Instance.new("Frame")
		local ImageLabel = Instance.new("ImageLabel")
		local UIScale = Instance.new("UIScale")

		--Properties:

		Button.Name = "Button"
		Button.Parent = Parent
		Button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		Button.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Button.Position = UDim2.new(0, 0, 0.439393938, 0)
		Button.Selectable = false
		Button.Size = UDim2.new(1, -20, 0, 31)
		Button.AutoButtonColor = true
		Button.TextWrapped = true     
		Button.Text = ""

		UICorner.CornerRadius = UDim.new(0, 5)
		UICorner.Parent = Button

		TextLabel.Parent = Button
		TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		TextLabel.BackgroundTransparency = 1.000
		TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
		TextLabel.Size = UDim2.new(0, 194, 0, 31)
		TextLabel.Font = Enum.Font.GothamMedium
		TextLabel.Text = ButName
		TextLabel.TextColor3 = Color3.fromRGB(193, 193, 193)
		TextLabel.TextSize = 12.000
		TextLabel.TextXAlignment = Enum.TextXAlignment.Left

		UIPadding.Parent = TextLabel
		UIPadding.PaddingLeft = UDim.new(0, 10)

		Status.Name = "Status"
		Status.Parent = Button
		Status.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Status.BackgroundTransparency = 1.000
		Status.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Status.Position = UDim2.new(0.839826822, 0, 0, 0)
		Status.Size = UDim2.new(0, 37, 0, 31)

		ActualThing.Name = "ActualThing"
		ActualThing.Parent = Status
		ActualThing.AnchorPoint = Vector2.new(0.5, 0.5)
		ActualThing.BackgroundColor3 = Color3.fromRGB(106, 0, 255)
		ActualThing.BackgroundTransparency = 1.000
		ActualThing.BorderColor3 = Color3.fromRGB(27, 42, 53)
		ActualThing.Position = UDim2.new(0.5, 0, 0.5, 0)
		ActualThing.Size = UDim2.new(0, 20, 0, 20)

		ImageLabel.Parent = ActualThing
		ImageLabel.AnchorPoint = Vector2.new(0.5, 0.5)
		ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		ImageLabel.BackgroundTransparency = 1.000
		ImageLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
		ImageLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
		ImageLabel.Size = UDim2.new(0, 20, 0, 20)
		ImageLabel.Image = "rbxassetid://7734010488"
		ImageLabel.ImageColor3 = Color3.fromRGB(104, 104, 104)

		UIScale.Parent = ImageLabel
		UIScale.Scale = 0.800


		UIStroke:Clone().Parent = Button
		UIStroke:Clone().Parent = ActualThing

		-- Button click event
		Button.MouseButton1Click:Connect(function()
			--ImageLabel.ImageColor3 = Color3.fromRGB(255, 255, 255)
			ColorChange(ImageLabel, Color3.fromRGB(255, 255, 255), 2)

			Callback()
			ImageLabel.ImageColor3 = Color3.fromRGB(104, 104, 104)
		end)

		Button.MouseEnter:Connect(function()
			game:GetService("TweenService"):Create(Button, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
				BackgroundColor3 = Color3.fromRGB(20, 115, 215)
			}):Play()
		end)
		
		Button.MouseLeave:Connect(function()
			game:GetService("TweenService"):Create(Button, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
				BackgroundColor3 = Color3.fromRGB(35, 35, 35)
			}):Play()
		end)

		function ButtonFunction:UpdateButton(newTitle)
			TextLabel.Text = newTitle
		end
		return ButtonFunction
	end


	function Library:Label(parent, LabelText)
		local LabelText = LabelText or "Label"
		local labelFunctions = {}
		local Label = Instance.new("TextLabel")
		local LabCorner = Instance.new("UICorner")
		
		Label.Name = "Label"
		Label.Parent = parent
		Label.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		Label.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Label.Size = UDim2.new(1, -20, 0, 31)
		Label.Text = LabelText
		Label.TextColor3 = Color3.fromRGB(193, 193, 193)
		Label.TextSize = 12
		Label.Font = Enum.Font.GothamMedium
		
		Label.TextWrapped = true              -- Wrap text inside the label width
	--	Label.TextXAlignment = Enum.TextXAlignment.Left  -- Align text to left
		Label.TextYAlignment = Enum.TextYAlignment.Center -- Vertically center text
		Label.TextTruncate = Enum.TextTruncate.None       -- Don't truncate text
		
		LabCorner.CornerRadius = UDim.new(0, 5)
		LabCorner.Parent = Label

		UIStroke:Clone().Parent = Label


		function labelFunctions:UpdateLabel(newText)
			Label.Text = newText
		end

		return labelFunctions
	end


	function Library:TextBox(parent, titleText, defaultValue, callback)
		local Container = Instance.new("Frame")
		Container.Parent = parent
		Container.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		Container.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Container.Size = UDim2.new(1, -20, 0, 40)

		local UICorner = Instance.new("UICorner")
		UICorner.CornerRadius = UDim.new(0, 5)
		UICorner.Parent = Container

		local TitleLabel = Instance.new("TextLabel")
		TitleLabel.Parent = Container
		TitleLabel.BackgroundTransparency = 1
		TitleLabel.Font = Enum.Font.GothamMedium
		TitleLabel.Text = titleText
		TitleLabel.TextColor3 = Color3.fromRGB(193, 193, 193)
		TitleLabel.TextSize = 14
		TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
		TitleLabel.Position = UDim2.new(0, 10, 0.5, 0)
		TitleLabel.AnchorPoint = Vector2.new(0, 0.5)
		TitleLabel.Size = UDim2.new(0.5, -10, 1, 0)
		TitleLabel.TextWrapped = true
		
		
		
		local TextInput = Instance.new("TextBox")
		TextInput.Parent = Container
		TextInput.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		TextInput.BorderColor3 = Color3.fromRGB(27, 42, 53)
		TextInput.ClearTextOnFocus = false
		TextInput.Font = Enum.Font.Gotham
		TextInput.PlaceholderColor3 = Color3.fromRGB(104, 104, 104)
		TextInput.Text = defaultValue or ""
		TextInput.TextColor3 = Color3.fromRGB(177, 177, 177)
		TextInput.TextSize = 14
		TextInput.Position = UDim2.new(1, -10, 0.5, 0)
		TextInput.AnchorPoint = Vector2.new(1, 0.5)
		TextInput.Size = UDim2.new(0, 100, 0.7, 0)

		local UICornerTextBox = Instance.new("UICorner")
		UICornerTextBox.CornerRadius = UDim.new(0, 4)
		UICornerTextBox.Parent = TextInput
		
		local stroke = UIStroke:Clone()
		stroke.Parent = TextInput
		stroke.Color = Color3.fromRGB(50, 50, 50)
		stroke.Thickness = 2

		TextInput.MouseEnter:Connect(function()
			TweenService:Create(stroke, TweenInfo.new(0.1), {Color = Color3.fromRGB(20, 115, 215)}):Play()
		end)
		TextInput.MouseLeave:Connect(function()
			TweenService:Create(stroke, TweenInfo.new(0.1), {Color = Color3.fromRGB(50, 50, 50)}):Play()
		end)
		
		
		local minWidth = 50
		local maxWidth = math.max(Container.AbsoluteSize.X * 0.6, minWidth)
		local padding = 15
		local approxCharWidth = 7

		local function updateWidth()
			local textLength = #TextInput.Text
			local desiredWidth = math.clamp(textLength * approxCharWidth + padding, minWidth, maxWidth)
			TextInput.Size = UDim2.new(0, desiredWidth, 0, TextInput.AbsoluteSize.Y)
		end

		-- Remove callback on text change for live typing if you want
		TextInput:GetPropertyChangedSignal("Text"):Connect(function()
			updateWidth()
		end)

		TextInput.FocusLost:Connect(function()
			callback(TextInput.Text, true)
			updateWidth()
		end)

		Container:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
			maxWidth = Container.AbsoluteSize.X * 0.6
			updateWidth()
		end)

		updateWidth()

		return TextInput, function()
			callback(TextInput.Text, true)
			updateWidth()
		end
	end

	
	
	--toggle
	function Library:Toggle(tab, toggleName, callback)
		local TweenService = game:GetService("TweenService")
		local TogFunction = {}
		local Toggle = Instance.new("TextButton")
		Toggle.Name = "Toggle"
		Toggle.Parent = tab
		Toggle.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		Toggle.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Toggle.Size = UDim2.new(1, -20, 0, 31)
		Toggle.Position = UDim2.new(0, 10, 0, 10)
		Toggle.AutoButtonColor = false
		Toggle.TextWrapped = true     

		Toggle.Text = ""

		local UICorner = Instance.new("UICorner", Toggle)
		UICorner.CornerRadius = UDim.new(0, 5)

		local uistrokeT = Instance.new("UIStroke", Toggle)
		uistrokeT.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		uistrokeT.Color = Color3.fromRGB(50, 50, 50)
		uistrokeT.Thickness = 2

		local Tsound = Instance.new("Sound", Toggle)
		Tsound.SoundId = "rbxassetid://2809024273"
		Tsound.Volume = 0.4

		local TextLabel = Instance.new("TextLabel", Toggle)
		TextLabel.BackgroundTransparency = 1.000
		TextLabel.Size = UDim2.new(0, 194, 0, 31)
		TextLabel.Font = Enum.Font.GothamMedium
		TextLabel.Text = toggleName
		TextLabel.TextColor3 = Color3.fromRGB(193, 193, 193)
		TextLabel.TextSize = 12
		TextLabel.TextXAlignment = Enum.TextXAlignment.Left

		local UIPadding = Instance.new("UIPadding", TextLabel)
		UIPadding.PaddingLeft = UDim.new(0, 10)

		local Status = Instance.new("Frame", Toggle)
		Status.Name = "Status"
		Status.BackgroundTransparency = 1.000
		Status.Position = UDim2.new(0.84, 0, 0, 0)
		Status.Size = UDim2.new(0, 37, 0, 31)

		local ToggleBckg = Instance.new("Frame", Status)
		ToggleBckg.Name = "ToggleBckg"
		ToggleBckg.AnchorPoint = Vector2.new(0.5, 0.5)
		ToggleBckg.BackgroundColor3 = Color3.fromRGB(29, 29, 29)
		ToggleBckg.BorderColor3 = Color3.fromRGB(27, 42, 53)
		ToggleBckg.Position = UDim2.new(0.5, 0, 0.5, 0)
		ToggleBckg.Size = UDim2.new(0, 20, 0, 20)

		local UICorner_2 = Instance.new("UICorner", ToggleBckg)
		UICorner_2.CornerRadius = UDim.new(0, 5)

		uistrokeT:Clone().Parent = ToggleBckg

		local Icon = Instance.new("ImageLabel", ToggleBckg)
		Icon.Name = "Icon"
		Icon.AnchorPoint = Vector2.new(0.5, 0.5)
		Icon.BackgroundTransparency = 1.000
		Icon.Position = UDim2.new(0.5, 0, 0.5, 0)
		Icon.Size = UDim2.new(0, 20, 0, 20)
		Icon.Image = "http://www.roblox.com/asset/?id=13319773302"
		Icon.ImageColor3 = Color3.fromRGB(0, 0, 0)
		Icon.ImageTransparency = 1.000

		local UIScale = Instance.new("UIScale", Icon)
		UIScale.Scale = 0.800

		-- STATE CONTROL
		local isToggled = false

		local function updateVisual()
			Icon.ImageTransparency = isToggled and 0 or 1
			ToggleBckg.BackgroundColor3 = isToggled and Color3.fromRGB(255, 100, 100) or Color3.fromRGB(29, 29, 29)
		end

		local function toggleState()
			isToggled = not isToggled
			updateVisual()
			pcall(callback, isToggled)
		end

		-- Public setter for external state control
		function TogFunction:Set(state)
			if isToggled == state then return end
			isToggled = state
			updateVisual()
			pcall(callback, isToggled)
		end

		-- Interactions
		Toggle.MouseButton1Click:Connect(toggleState)

		Toggle.MouseEnter:Connect(function()
			Tsound:Play()
			TweenService:Create(uistrokeT, TweenInfo.new(0.1), {Color = Color3.fromRGB(20, 115, 215)}):Play() -- 86, 34, 34
		end)

		Toggle.MouseLeave:Connect(function()
			TweenService:Create(uistrokeT, TweenInfo.new(0.1), {Color = Color3.fromRGB(50, 50, 50)}):Play()
		end)


		return TogFunction
	end




	function Library:Slider(parent, Name, Min, Max, Callback)
		Name = Name or "Slider"
		Callback = Callback or function() end
		Min = Min or 16
		Max = Max or 500

		-- Create UI elements
		local Slider = Instance.new("Frame")
		local UICorner = Instance.new("UICorner")
		local UIStroke = Instance.new("UIStroke")
		local Title = Instance.new("TextLabel")
		local Main = Instance.new("Frame")
		local UICorner_2 = Instance.new("UICorner")
		local UIStroke_2 = Instance.new("UIStroke")
		local Progress = Instance.new("Frame")
		local UICorner_3 = Instance.new("UICorner")
		local UIStroke_3 = Instance.new("UIStroke")
		local Information = Instance.new("TextLabel")
		local Shadow = Instance.new("ImageLabel")
		local UICorner_4 = Instance.new("UICorner")
		local Interact = Instance.new("TextButton")

		-- Slider properties
		Slider.Name = "Slider"
		Slider.Parent = parent
		Slider.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
		Slider.BorderSizePixel = 0
		Slider.Size = UDim2.new(1, -20, 0, 35)

		UICorner.CornerRadius = UDim.new(0, 4)
		UICorner.Parent = Slider

		UIStroke.Color = Color3.fromRGB(60, 60, 60)
		UIStroke.Thickness = 1.5
		UIStroke.Parent = Slider

		-- Title properties
		Title.Name = "Title"
		Title.Parent = Slider
		Title.AnchorPoint = Vector2.new(0, 0.5)
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0, 10, 0.5, 0)
		Title.Size = UDim2.new(0.4, 0, 0, 14) -- 50% of the parent width
		Title.Font = Enum.Font.GothamMedium
		Title.Text = Name
		Title.TextColor3 = Color3.fromRGB(200, 200, 200)
		Title.TextScaled = true
		Title.TextWrapped = true
		Title.TextXAlignment = Enum.TextXAlignment.Left

		-- Main bar properties
		Main.Name = "Main"
		Main.Parent = Slider
		Main.AnchorPoint = Vector2.new(1, 0.5)
		Main.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
		Main.BackgroundTransparency = 0.8
		Main.BorderSizePixel = 0
		Main.Position = UDim2.new(1, -10, 0.5, 0) 
		Main.Size = UDim2.new(0.5, 0, 0, 30) -- 40% of the parent width
		Main.ZIndex = 3

		UICorner_2.CornerRadius = UDim.new(0, 6)
		UICorner_2.Parent = Main
		
		UIStroke_2.Color = Color3.fromRGB(60, 60, 60)
		UIStroke_2.Thickness = 1.5
		UIStroke_2.Parent = Main

		-- Progress bar properties
		Progress.Name = "Progress"
		Progress.Parent = Main
		Progress.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		Progress.BorderSizePixel = 0
		Progress.Size = UDim2.new(0, 0, 1, 0)  -- Start at zero width

		UICorner_3.CornerRadius = UDim.new(0, 6)
		UICorner_3.Parent = Progress

		UIStroke_3.Color = Color3.fromRGB(60, 60, 60)
		UIStroke_3.Thickness = 1.5
		UIStroke_3.Parent = Progress

		-- Information label properties
		Information.Name = "Information"
		Information.Parent = Main
		Information.AnchorPoint = Vector2.new(0.5, 0.5)
		Information.BackgroundTransparency = 1
		Information.Position = UDim2.new(0.5, 0, 0.5, 0)
		Information.Size = UDim2.new(1, 0, 1, 0)
		Information.ZIndex = 5
		Information.Font = Enum.Font.GothamMedium
		Information.Text = tostring(Min)
		Information.TextColor3 = Color3.fromRGB(200, 200, 200)
		Information.TextScaled = true
		Information.TextTransparency = 0.4
		Information.TextWrapped = true
		Information.TextXAlignment = Enum.TextXAlignment.Center

		-- Shadow properties
		Shadow.Name = "Shadow"
		Shadow.Parent = Main
		Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
		Shadow.BackgroundTransparency = 1
		Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
		Shadow.Size = UDim2.new(1, 0, 1, 0)
		Shadow.ZIndex = 3
		Shadow.Image = "rbxassetid://3602733521"
		Shadow.ImageColor3 = Color3.fromRGB(20, 20, 20)
		Shadow.ImageTransparency = 0.7

		UICorner_4.CornerRadius = UDim.new(0, 6)
		UICorner_4.Parent = Shadow

		-- Interact button properties
		Interact.Name = "Interact"
		Interact.Parent = Main
		Interact.BackgroundTransparency = 1
		Interact.Size = UDim2.new(1, 0, 1, 0)
		Interact.ZIndex = 10
		Interact.Text = ""
		
		Slider.MouseEnter:Connect(function()
			TweenService:Create(UIStroke_2, TweenInfo.new(0.1), {Color = Color3.fromRGB(20, 115, 215)}):Play() -- 86, 34, 34
		end)

		Slider.MouseLeave:Connect(function()
			TweenService:Create(UIStroke_2, TweenInfo.new(0.1), {Color = Color3.fromRGB(50, 50, 50)}):Play()
		end)
		
		-- Slider logic
		local currentValue = Min

		local function updateValue(mouseX)
			local relativeX = mouseX - Main.AbsolutePosition.X
			local percent = math.clamp(relativeX / Main.AbsoluteSize.X, 0, 1)
			local newValue = math.floor(percent * (Max - Min) + Min)
			newValue = math.clamp(newValue, Min, Max)
			Progress.Size = UDim2.new(percent, 0, 1, 0)
			Information.Text = tostring(newValue)
			currentValue = newValue
		end

		local function setProgress(value)
			local percent = math.clamp((value - Min) / (Max - Min), 0, 1)
			Progress.Size = UDim2.new(percent, 0, 1, 0)
			Information.Text = tostring(value)
		end

		local moveConn, releaseConn

		Interact.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				updateValue(input.Position.X)
				moveConn = Interact.InputChanged:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseMovement then
						updateValue(input.Position.X)
						-- Do NOT call Callback here
					end
				end)
				releaseConn = game:GetService("UserInputService").InputEnded:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						if moveConn then moveConn:Disconnect() end
						if releaseConn then releaseConn:Disconnect() end
						Callback(currentValue)  -- Call callback only once here on release
					end
				end)
			end
		end)

		setProgress(Min)
		Callback(Min)

		return Slider
	end






	function Library:Keybind(tab, keybindName, defaultKey, callback)
		local UserInputService = game:GetService("UserInputService")

		keybindName = keybindName or "Keybind"
		defaultKey = defaultKey or Enum.KeyCode.K
		callback = callback or function() end

		local Keybind = Instance.new("TextButton")
		Keybind.Name = keybindName
		Keybind.Parent = tab
		Keybind.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		Keybind.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Keybind.Size = UDim2.new(1, -20, 0, 31)
		Keybind.AutoButtonColor = false
		Keybind.Text = ""
		Keybind.Selectable = false

		local UICorner = Instance.new("UICorner")
		UICorner.CornerRadius = UDim.new(0, 5)
		UICorner.Parent = Keybind

		local TextLabel = Instance.new("TextLabel")
		TextLabel.Parent = Keybind
		TextLabel.BackgroundTransparency = 1
		TextLabel.Size = UDim2.new(0.75, 0, 1, 0)
		TextLabel.Position = UDim2.new(0, 10, 0, 0)
		TextLabel.Font = Enum.Font.GothamMedium
		TextLabel.Text = keybindName
		TextLabel.TextColor3 = Color3.fromRGB(193, 193, 193)
		TextLabel.TextSize = 12
		TextLabel.TextXAlignment = Enum.TextXAlignment.Left

		local Status = Instance.new("Frame")
		Status.Name = "Status"
		Status.Parent = Keybind
		Status.BackgroundTransparency = 1
		Status.Size = UDim2.new(0.25, 0, 1, 0)
		Status.Position = UDim2.new(0.75, 0, 0, 0)
		

		local statcor = Instance.new("UICorner")
		statcor.CornerRadius = UDim.new(0, 4)
		statcor.Parent = Status
		
		local keyMstroke = 	UIStroke:Clone()
		keyMstroke.Parent = Status
		
		local keystroke = UIStroke:Clone()
		keystroke.Parent = Keybind
		
		local TextLabel_2 = Instance.new("TextLabel")
		TextLabel_2.Parent = Status
		TextLabel_2.BackgroundTransparency = 1
		TextLabel_2.Size = UDim2.new(1, 0, 1, 0)
		TextLabel_2.Font = Enum.Font.GothamMedium
		TextLabel_2.Text = tostring(defaultKey):gsub("Enum.", "")
		TextLabel_2.TextColor3 = Color3.fromRGB(85, 85, 85)
		TextLabel_2.TextScaled = true
		TextLabel_2.TextWrapped = true
		TextLabel_2.TextXAlignment = Enum.TextXAlignment.Right
		
		Keybind.MouseEnter:Connect(function()
			TweenService:Create(keyMstroke, TweenInfo.new(0.1), {Color = Color3.fromRGB(20, 115, 215)}):Play() -- 86, 34, 34
		end)

		Keybind.MouseLeave:Connect(function()
			TweenService:Create(keyMstroke, TweenInfo.new(0.1), {Color = Color3.fromRGB(50, 50, 50)}):Play()
		end)
		
		
		local currentKey = defaultKey

		local function formatKey(input)
			if typeof(input) == "EnumItem" then
				local str = tostring(input)
				str = str:gsub("Enum%.KeyCode%.", "")
				str = str:gsub("Enum%.UserInputType%.", "")
				str = str:gsub("MouseButton", "Mouse Btn ")
				str = str:gsub("MouseWheel", "Mouse Wheel")
				return str
			end
			return tostring(input)
		end

		local function updateKeyLabel()
			TextLabel_2.Text = formatKey(currentKey)
		end

		local function onInputBegan(input, isProcessed)
			if isProcessed then return end

			if input.UserInputType == currentKey or input.KeyCode == currentKey then
				callback()
			end
		end

		UserInputService.InputBegan:Connect(onInputBegan)

		Keybind.MouseButton1Click:Connect(function()
			TextLabel_2.Text = "..."
			local connection
			connection = UserInputService.InputBegan:Connect(function(input, isProcessed)
				if not isProcessed then
					local uiType = input.UserInputType
					if uiType == Enum.UserInputType.Keyboard then
						currentKey = input.KeyCode
					elseif uiType == Enum.UserInputType.MouseButton1 or
						uiType == Enum.UserInputType.MouseButton2 or
						uiType == Enum.UserInputType.MouseButton3 or
						uiType == Enum.UserInputType.MouseWheel then
						currentKey = uiType
					else
						return
					end
					updateKeyLabel()
					connection:Disconnect()
				end
			end)
		end)

		updateKeyLabel()
		return Keybind
	end




	--Color Picker is from Kavo!!!!!!!

	local focusing = false

	function Library:ColorPicker(tab, colText, defcolor, callback)
		colText = colText or "ColorPicker"
		callback = callback or function() end
		defcolor = defcolor or Color3.fromRGB(1,1,1)

		local h, s, v = Color3.toHSV(defcolor)
		local ms = game.Players.LocalPlayer:GetMouse()
		local colorOpened = false
		local colorElement = Instance.new("TextButton")
		local UICorner = Instance.new("UICorner")
		local colorHeader = Instance.new("Frame")
		local UICorner_2 = Instance.new("UICorner")
		local touch = Instance.new("ImageLabel")
		local togName = Instance.new("TextLabel")
		local viewInfo = Instance.new("ImageButton")
		local colorCurrent = Instance.new("Frame")
		local UICorner_3 = Instance.new("UICorner")
		local UIListLayout = Instance.new("UIListLayout")
		local colorInners = Instance.new("Frame")
		local UICorner_4 = Instance.new("UICorner")
		local rgb = Instance.new("ImageButton")
		local UICorner_5 = Instance.new("UICorner")
		local rbgcircle = Instance.new("ImageLabel")
		local darkness = Instance.new("ImageButton")
		local UICorner_6 = Instance.new("UICorner")
		local darkcircle = Instance.new("ImageLabel")
		local toggleDisabled = Instance.new("ImageLabel")
		local toggleEnabled = Instance.new("ImageLabel")
		local onrainbow = Instance.new("TextButton")
		local togName_2 = Instance.new("TextLabel")

		--Properties:
		local Sample = Instance.new("ImageLabel")
		Sample.Name = "Sample"
		Sample.Parent = colorHeader
		Sample.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Sample.BackgroundTransparency = 1.000
		Sample.Image = "http://www.roblox.com/asset/?id=4560909609"
		Sample.ImageColor3 = Color3.fromRGB(64, 64, 64)
		Sample.ImageTransparency = 0.600

		local btn = colorHeader
		local sample = Sample

		colorElement.Name = "colorElement"
		colorElement.Parent = tab
		colorElement.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		colorElement.BackgroundTransparency = 1.000
		colorElement.ClipsDescendants = true
		colorElement.Position = UDim2.new(0, 0, 0.566834569, 0)
		colorElement.Size = UDim2.new(0, 352, 0, 33)
		colorElement.AutoButtonColor = false
		colorElement.Font = Enum.Font.SourceSans
		colorElement.Text = ""
		colorElement.TextColor3 = Color3.fromRGB(0, 0, 0)
		colorElement.TextSize = 14.000
		colorElement.MouseButton1Click:Connect(function()
			if not focusing then
				if colorOpened then
					colorOpened = false
					colorElement:TweenSize(UDim2.new(0, 352, 0, 33), "InOut", "Linear", 0.08)
					wait(0.1)

					local c = sample:Clone()
					c.Parent = btn
					local x, y = (ms.X - c.AbsolutePosition.X), (ms.Y - c.AbsolutePosition.Y)
					c.Position = UDim2.new(0, x, 0, y)
					local len, size = 0.35, nil
					if btn.AbsoluteSize.X >= btn.AbsoluteSize.Y then
						size = (btn.AbsoluteSize.X * 1.5)
					else
						size = (btn.AbsoluteSize.Y * 1.5)
					end
					c:TweenSizeAndPosition(UDim2.new(0, size, 0, size), UDim2.new(0.5, (-size / 2), 0.5, (-size / 2)), 'Out', 'Quad', len, true, nil)
					for i = 1, 10 do
						c.ImageTransparency = c.ImageTransparency + 0.05
						wait(len / 12)
					end
					c:Destroy()
				else
					colorOpened = true
					colorElement:TweenSize(UDim2.new(0, 352, 0, 141), "InOut", "Linear", 0.08, true)
					wait(0.1)

					local c = sample:Clone()
					c.Parent = btn
					local x, y = (ms.X - c.AbsolutePosition.X), (ms.Y - c.AbsolutePosition.Y)
					c.Position = UDim2.new(0, x, 0, y)
					local len, size = 0.35, nil
					if btn.AbsoluteSize.X >= btn.AbsoluteSize.Y then
						size = (btn.AbsoluteSize.X * 1.5)
					else
						size = (btn.AbsoluteSize.Y * 1.5)
					end
					c:TweenSizeAndPosition(UDim2.new(0, size, 0, size), UDim2.new(0.5, (-size / 2), 0.5, (-size / 2)), 'Out', 'Quad', len, true, nil)
					for i = 1, 10 do
						c.ImageTransparency = c.ImageTransparency + 0.05
						wait(len / 12)
					end
					c:Destroy()
				end
			else
				return
			end
		end)


		UICorner.CornerRadius = UDim.new(0, 4)
		UICorner.Parent = colorElement

		colorHeader.Name = "colorHeader"
		colorHeader.Parent = colorElement
		colorHeader.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		colorHeader.Size = UDim2.new(0, 352, 0, 33)
		colorHeader.ClipsDescendants = true

		UICorner_2.CornerRadius = UDim.new(0, 4)
		UICorner_2.Parent = colorHeader

		touch.Name = "touch"
		touch.Parent = colorHeader
		touch.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		touch.BackgroundTransparency = 1.000
		touch.BorderColor3 = Color3.fromRGB(27, 42, 53)
		touch.Position = UDim2.new(0.0199999996, 0, 0.180000007, 0)
		touch.Size = UDim2.new(0, 21, 0, 21)
		touch.Image = "rbxassetid://3926305904"
		touch.ImageColor3 = Color3.fromRGB(64, 64, 64)
		touch.ImageRectOffset = Vector2.new(44, 964)
		touch.ImageRectSize = Vector2.new(36, 36)

		togName.Name = "togName"
		togName.Parent = colorHeader
		togName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		togName.BackgroundTransparency = 1.000
		togName.Position = UDim2.new(0.096704483, 0, 0.272727281, 0)
		togName.Size = UDim2.new(0, 288, 0, 14)
		togName.Font = Enum.Font.GothamSemibold
		togName.Text = colText
		togName.TextColor3 = Color3.fromRGB(255,255,255)
		togName.TextSize = 14.000
		togName.RichText = true
		togName.TextXAlignment = Enum.TextXAlignment.Left


		colorCurrent.Name = "colorCurrent"
		colorCurrent.Parent = colorHeader
		colorCurrent.BackgroundColor3 = defcolor
		colorCurrent.Position = UDim2.new(0.548704505, 0, 0.333606154, 0)
		colorCurrent.Size = UDim2.new(0, 42, 0, 18)

		UICorner_3.CornerRadius = UDim.new(0, 4)
		UICorner_3.Parent = colorCurrent

		UIListLayout.Parent = colorElement
		UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		UIListLayout.Padding = UDim.new(0, 3)

		colorInners.Name = "colorInners"
		colorInners.Parent = colorElement
		colorInners.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		colorInners.Position = UDim2.new(0, 0, 0.255319148, 0)
		colorInners.Size = UDim2.new(0, 281, 0, 105)

		UICorner_4.CornerRadius = UDim.new(0, 4)
		UICorner_4.Parent = colorInners

		rgb.Name = "rgb"
		rgb.Parent = colorInners
		rgb.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		rgb.BackgroundTransparency = 1.000
		rgb.Position = UDim2.new(-0.00146592979, 0, 0.0476190485, 0)
		rgb.Size = UDim2.new(0, 160, 0, 80)
		rgb.Image = "http://www.roblox.com/asset/?id=6523286724"

		UICorner_5.CornerRadius = UDim.new(0, 4)
		UICorner_5.Parent = rgb

		rbgcircle.Name = "rbgcircle"
		rbgcircle.Parent = rgb
		rbgcircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		rbgcircle.BackgroundTransparency = 1.000
		rbgcircle.Size = UDim2.new(0, 14, 0, 14)

		rbgcircle.Image = "rbxassetid://3926309567"
		rbgcircle.ImageColor3 = Color3.fromRGB(0, 0, 0)
		rbgcircle.ImageRectOffset = Vector2.new(628, 420)
		rbgcircle.ImageRectSize = Vector2.new(48, 48)

		darkness.Name = "darkness"
		darkness.Parent = colorInners
		darkness.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		darkness.BackgroundTransparency = 1.000
		darkness.Position = UDim2.new(0.593658984, 0, 0.0571428575, 0)
		darkness.Size = UDim2.new(0, 18, 0, 79)
		darkness.Image = "http://www.roblox.com/asset/?id=6523291212"

		UICorner_6.CornerRadius = UDim.new(0, 4)
		UICorner_6.Parent = darkness

		darkcircle.Name = "darkcircle"
		darkcircle.Parent = darkness
		darkcircle.AnchorPoint = Vector2.new(0.5, 0)
		darkcircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		darkcircle.BackgroundTransparency = 1.000
		darkcircle.Size = UDim2.new(0, 14, 0, 14)
		darkcircle.Image = "rbxassetid://3926309567"
		darkcircle.ImageColor3 = Color3.fromRGB(0, 0, 0)
		darkcircle.ImageRectOffset = Vector2.new(628, 420)
		darkcircle.ImageRectSize = Vector2.new(48, 48)

		--[[
		toggleDisabled.Name = "toggleDisabled"
		toggleDisabled.Parent = colorInners
		toggleDisabled.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		toggleDisabled.BackgroundTransparency = 1.000
		toggleDisabled.Position = UDim2.new(0.704659104, 0, 0.0657142699, 0)
		toggleDisabled.Size = UDim2.new(0, 21, 0, 21)
		toggleDisabled.Image = "rbxassetid://3926309567"
		toggleDisabled.ImageColor3 = Color3.fromRGB(64, 64, 64)
		toggleDisabled.ImageRectOffset = Vector2.new(628, 420)
		toggleDisabled.ImageRectSize = Vector2.new(48, 48)

		toggleEnabled.Name = "toggleEnabled"
		toggleEnabled.Parent = colorInners
		toggleEnabled.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		toggleEnabled.BackgroundTransparency = 1.000
		toggleEnabled.Position = UDim2.new(0.704659104, 0, 0.0657142699, 0)
		toggleEnabled.Size = UDim2.new(0, 21, 0, 21)
		toggleEnabled.Image = "rbxassetid://3926309567"
		toggleEnabled.ImageColor3 = Color3.fromRGB(64, 64, 64)
		toggleEnabled.ImageRectOffset = Vector2.new(784, 420)
		toggleEnabled.ImageRectSize = Vector2.new(48, 48)
		toggleEnabled.ImageTransparency = 1.000

		onrainbow.Name = "onrainbow"
		onrainbow.Parent = toggleEnabled
		onrainbow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		onrainbow.BackgroundTransparency = 1.000
		onrainbow.Position = UDim2.new(2.90643607e-06, 0, 0, 0)
		onrainbow.Size = UDim2.new(1, 0, 1, 0)
		onrainbow.Font = Enum.Font.SourceSans
		onrainbow.Text = ""
		onrainbow.TextColor3 = Color3.fromRGB(0, 0, 0)
		onrainbow.TextSize = 14.000
		
		]]--



		local ToggleBckg = Instance.new("TextButton")
		local UICorner = Instance.new("UICorner")
		local Icon = Instance.new("ImageLabel")
		local UIScale = Instance.new("UIScale")

		--Properties:

		ToggleBckg.Name = "ToggleBckg"
		ToggleBckg.Parent = colorInners
		ToggleBckg.AnchorPoint = Vector2.new(0.5, 0.5)
		ToggleBckg.BackgroundColor3 = Color3.fromRGB(29, 29, 29)
		ToggleBckg.Position = UDim2.new(0.722793519, 0, 0.189809456, 0)
		ToggleBckg.Size = UDim2.new(0, 20, 0, 20)
		ToggleBckg.Text = ""

		UICorner.CornerRadius = UDim.new(0, 5)
		UICorner.Parent = ToggleBckg

		Icon.Name = "Icon"
		Icon.Parent = ToggleBckg
		Icon.AnchorPoint = Vector2.new(0.5, 0.5)
		Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Icon.BackgroundTransparency = 1.000
		Icon.Position = UDim2.new(0.5, 0, 0.5, 0)
		Icon.Size = UDim2.new(0, 20, 0, 20)
		Icon.Image = "http://www.roblox.com/asset/?id=13319773302"
		Icon.ImageColor3 = Color3.fromRGB(0, 0, 0)
		Icon.ImageTransparency = 1.000

		UIScale.Parent = Icon
		UIScale.Scale = 0.800










		togName_2.Name = "togName"
		togName_2.Parent = colorInners
		togName_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		togName_2.BackgroundTransparency = 1.000
		togName_2.Position = UDim2.new(0.794234872, 0, 0.0904761925, 0)
		togName_2.Size = UDim2.new(0, 74, 0, 14)
		togName_2.Font = Enum.Font.GothamSemibold
		togName_2.Text = "Rainbow"
		togName_2.TextColor3 = Color3.fromRGB(255,255,255)
		togName_2.TextSize = 14.000
		togName_2.TextXAlignment = Enum.TextXAlignment.Left


		UIStroke:Clone().Parent = colorElement
		UIStroke:Clone().Parent = colorHeader
		UIStroke:Clone().Parent = colorInners


		local hovering = false

		colorElement.MouseEnter:Connect(function()
			if not focusing then
				game.TweenService:Create(colorElement, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
					BackgroundColor3 = Color3.fromRGB(Color3.fromRGB(20, 20, 20).r * 255 + 8, Color3.fromRGB(20, 20, 20).g * 255 + 9, Color3.fromRGB(20, 20, 20).b * 255 + 10)
				}):Play()
				hovering = true
			end 
		end)
		colorElement.MouseLeave:Connect(function()
			if not focusing then
				game.TweenService:Create(colorElement, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
					BackgroundColor3 = Color3.fromRGB(20, 20, 20)
				}):Play()
				hovering = false
			end
		end)        

		coroutine.wrap(function()
			while wait() do
				if not hovering then
					colorElement.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
				end
				touch.ImageColor3 = Color3.fromRGB(64, 64, 64)
				colorHeader.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
				togName.TextColor3 = Color3.fromRGB(255,255,255)

				viewInfo.ImageColor3 = Color3.fromRGB(64, 64, 64)
				colorInners.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
				--toggleDisabled.ImageColor3 = Color3.fromRGB(64, 64, 64)
				--toggleEnabled.ImageColor3 = Color3.fromRGB(64, 64, 64)

				Icon.ImageColor3  = Color3.fromRGB(64, 64, 64) --(255, 100, 100)


				togName_2.TextColor3 = Color3.fromRGB(255,255,255)
				Sample.ImageColor3 = Color3.fromRGB(64, 64, 64)
			end
		end)()

		local plr = game.Players.LocalPlayer
		local mouse = plr:GetMouse()
		local uis = game:GetService('UserInputService')
		local rs = game:GetService("RunService")
		local colorpicker = false
		local darknesss = false
		local dark = false
		local rgb = rgb    
		local dark = darkness    
		local cursor = rbgcircle
		local cursor2 = darkcircle
		local color = {1,1,1}
		local rainbow = false
		local rainbowconnection
		local counter = 0
		--
		local function zigzag(X) return math.acos(math.cos(X*math.pi))/math.pi end
		counter = 0
		local function mouseLocation()
			return plr:GetMouse()
		end
		local function cp()
			if colorpicker then
				local ml = mouseLocation()
				local x,y = ml.X - rgb.AbsolutePosition.X,ml.Y - rgb.AbsolutePosition.Y
				local maxX,maxY = rgb.AbsoluteSize.X,rgb.AbsoluteSize.Y
				if x<0 then x=0 end
				if x>maxX then x=maxX end
				if y<0 then y=0 end
				if y>maxY then y=maxY end
				x = x/maxX
				y = y/maxY
				local cx = cursor.AbsoluteSize.X/2
				local cy = cursor.AbsoluteSize.Y/2
				cursor.Position = UDim2.new(x,-cx,y,-cy)
				color = {1-x,1-y,color[3]}
				local realcolor = Color3.fromHSV(color[1],color[2],color[3])
				colorCurrent.BackgroundColor3 = realcolor
				callback(realcolor)
			end
			if darknesss then
				local ml = mouseLocation()
				local y = ml.Y - dark.AbsolutePosition.Y
				local maxY = dark.AbsoluteSize.Y
				if y<0 then y=0 end
				if y>maxY then y=maxY end
				y = y/maxY
				local cy = cursor2.AbsoluteSize.Y/2
				cursor2.Position = UDim2.new(0.5,0,y,-cy)
				cursor2.ImageColor3 = Color3.fromHSV(0,0,y)
				color = {color[1],color[2],1-y}
				local realcolor = Color3.fromHSV(color[1],color[2],color[3])
				colorCurrent.BackgroundColor3 = realcolor
				callback(realcolor)
			end
		end

		local function setcolor(tbl)
			local cx = cursor.AbsoluteSize.X/2
			local cy = cursor.AbsoluteSize.Y/2
			color = {tbl[1],tbl[2],tbl[3]}
			cursor.Position = UDim2.new(color[1],-cx,color[2]-1,-cy)
			cursor2.Position = UDim2.new(0.5,0,color[3]-1,-cy)
			local realcolor = Color3.fromHSV(color[1],color[2],color[3])
			colorCurrent.BackgroundColor3 = realcolor
		end
		local function setrgbcolor(tbl)
			local cx = cursor.AbsoluteSize.X/2
			local cy = cursor.AbsoluteSize.Y/2
			color = {tbl[1],tbl[2],color[3]}
			cursor.Position = UDim2.new(color[1],-cx,color[2]-1,-cy)
			local realcolor = Color3.fromHSV(color[1],color[2],color[3])
			colorCurrent.BackgroundColor3 = realcolor
			callback(realcolor)
		end
		local function togglerainbow()
			if rainbow then
				game.TweenService:Create(Icon, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {
					ImageTransparency = 1
				}):Play()
				ToggleBckg.BackgroundColor3 = Color3.fromRGB(75, 75, 75)

				rainbow = false
				rainbowconnection:Disconnect()
			else
				game.TweenService:Create(Icon, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {
					ImageTransparency = 0
				}):Play()
				ToggleBckg.BackgroundColor3 = Color3.fromRGB(255, 100, 100)

				rainbow = true
				rainbowconnection = rs.RenderStepped:Connect(function()
					setrgbcolor({zigzag(counter),1,1})
					counter = counter + 0.01
				end)
			end
		end

		ToggleBckg.MouseButton1Click:Connect(togglerainbow)
		--
		mouse.Move:connect(cp)
		rgb.MouseButton1Down:connect(function()colorpicker=true end)
		dark.MouseButton1Down:connect(function()darknesss=true end)
		uis.InputEnded:Connect(function(input)
			if input.UserInputType.Name == 'MouseButton1' then
				if darknesss then darknesss = false end
				if colorpicker then colorpicker = false end
			end
		end)
		setcolor({h,s,v})
	end





	function Library:MultiDropdown(tab, dropdownName, options, callback, settings)
		settings = settings or {}
		local selectedOptions = {}
		local MdrFunction = {}
		local hoverColor = settings.hoverColor or Color3.fromRGB(75, 75, 75)
		local disabledColor = settings.disabledColor or Color3.fromRGB(29, 29, 29)
		local selectedColor = settings.selectedColor or Color3.fromRGB(0, 170, 255)
		local defaultColor = Color3.fromRGB(55, 55, 55)
		local searchPlaceholder = settings.searchPlaceholder or "Search..."
		local customFont = settings.customFont or Enum.Font.GothamMedium
		local customFontSize = settings.customFontSize or 12
		local showTooltips = settings.showTooltips or true
		local showIcons = settings.showIcons or false
		local maxVisibleOptions = settings.maxVisibleOptions or 5

		-- Validate options
		assert(type(options) == "table" and #options > 0, "Options should be a non-empty table.")

		local isOpen = false
		local openDropdown = nil

		-- Create the dropdown structure
		local Dropdown = Instance.new("TextButton")
		Dropdown.Name = "Dropdown"
		Dropdown.Parent = tab
		Dropdown.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		Dropdown.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Dropdown.Position = UDim2.new(0, 0, 0.439393938, 0)
		Dropdown.Size = UDim2.new(1, -20, 0, 31)
		Dropdown.AutoButtonColor = false
		Dropdown.Text = ""
		Dropdown.TextColor3 = Color3.fromRGB(193, 193, 193)
		Dropdown.TextSize = customFontSize
		Dropdown.Font = customFont

		local UIStroke = Instance.new("UIStroke")
		UIStroke.Parent = Dropdown

		local UIC = Instance.new("UICorner")
		UIC.CornerRadius = UDim.new(0, 5)
		UIC.Parent = Dropdown

		local Main = Instance.new("Frame")
		Main.Name = "Main"
		Main.Parent = Dropdown
		Main.BackgroundTransparency = 1.000
		Main.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Main.Size = UDim2.new(1, 0, 1, 0)

		UIC:Clone().Parent = Main

		--[[
		local IconFrame = Instance.new("Frame")
		IconFrame.Name = "IconFrame"
		IconFrame.Parent = Main
		IconFrame.BackgroundTransparency = 1.000
		IconFrame.Size = UDim2.new(0, 31, 0, 31)
		IconFrame.Position = UDim2.new(1, -31, 0, 0)
]]


		local Icon = Instance.new("ImageLabel")
		Icon.Name = "Icon"
		Icon.Parent = Main
		Icon.AnchorPoint = Vector2.new(0.5, 0.5)
		Icon.BackgroundTransparency = 1.000
		Icon.Position = UDim2.new(1, -15, 0.5, 0)
		Icon.Size = UDim2.new(0, 20, 0, 20)
		Icon.Image = "rbxassetid://6031091000" -- Close icon
		Icon.ImageColor3 = Color3.fromRGB(109, 109, 109)

		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.Parent = Main
		Title.BackgroundTransparency = 1.000
		Title.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Title.Size = UDim2.new(1, -35, 1, 0)
		Title.Font = customFont
		Title.Text = dropdownName
		Title.TextColor3 = Color3.fromRGB(193, 193, 193)
		Title.TextSize = customFontSize
		Title.TextXAlignment = Enum.TextXAlignment.Left

		local UIPadding = Instance.new("UIPadding")
		UIPadding.Parent = Title
		UIPadding.PaddingLeft = UDim.new(0, 10)

		local SearchBox = Instance.new("TextBox")
		SearchBox.Name = "SearchBox"
		SearchBox.Parent = Dropdown.Parent
		SearchBox.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
		SearchBox.BorderSizePixel = 0
		SearchBox.Position = UDim2.new(0, 0, 1, 0)
		SearchBox.Size = UDim2.new(1, -20, 0, 25)
		SearchBox.Text = ""
		SearchBox.PlaceholderText = searchPlaceholder
		SearchBox.TextColor3 = Color3.fromRGB(214, 214, 214)
		SearchBox.TextSize = customFontSize
		SearchBox.ClearTextOnFocus = false
		SearchBox.BackgroundTransparency = 0.3
		SearchBox.Visible = false

		local SearchCorner = Instance.new("UICorner")
		SearchCorner.CornerRadius = UDim.new(0, 5)
		SearchCorner.Parent = SearchBox

		local List = Instance.new("ScrollingFrame")
		List.Name = "List"
		List.Parent = Dropdown.Parent
		List.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		List.BorderColor3 = Color3.fromRGB(27, 42, 53)
		List.Position = UDim2.new(0, 0, 0.469696969, 0)
		List.Size = UDim2.new(1, -20, 0, math.min(maxVisibleOptions * 28 + 5, #options * 28 + 5))
		List.ClipsDescendants = true
		List.CanvasSize = UDim2.new(0, 0, 0, #options * 28 + 5)
		List.ScrollBarThickness = 6
		List.ScrollingDirection = Enum.ScrollingDirection.Y
		List.Visible = false

		local ListCorner = Instance.new("UICorner")
		ListCorner.CornerRadius = UDim.new(0, 5)
		ListCorner.Parent = List

		local UIListLayout = Instance.new("UIListLayout")
		UIListLayout.Parent = List
		UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		UIListLayout.Padding = UDim.new(0, 3)

		local function updateOptions(filterText)
			for i, optionText in ipairs(options) do
				local optionButton = List:FindFirstChild("Option" .. i)
				if optionButton then
					optionButton.Visible = not filterText or optionText:lower():find(filterText:lower())
				end
			end
		end

		SearchBox:GetPropertyChangedSignal("Text"):Connect(function()
			updateOptions(SearchBox.Text)
		end)

		-- Create option buttons with checkboxes
		for i, optionText in ipairs(options) do
			local Option = Instance.new("TextButton")
			Option.Name = "Option" .. i
			Option.Parent = List
			Option.BackgroundColor3 = defaultColor
			Option.BorderSizePixel = 0
			Option.Size = UDim2.new(1, 0, 0, 25)
			Option.AutoButtonColor = false
			Option.Text = ""
			Option.TextColor3 = Color3.fromRGB(214, 214, 214)
			Option.TextWrapped = true
			Option.TextSize = customFontSize
			Option.TextXAlignment = Enum.TextXAlignment.Left

			local OptionText = Instance.new("TextLabel")
			OptionText.Name = "OptionText"
			OptionText.Parent = Option
			OptionText.BackgroundTransparency = 1
			OptionText.Size = UDim2.new(1, -30, 1, 0)
			OptionText.Position = UDim2.new(0, 30, 0, 0)
			OptionText.Text = optionText
			OptionText.TextColor3 = Color3.fromRGB(214, 214, 214)
			OptionText.TextSize = customFontSize
			OptionText.Font = customFont
			OptionText.TextXAlignment = Enum.TextXAlignment.Left

			local Checkbox = Instance.new("Frame")
			Checkbox.Name = "Checkbox"
			Checkbox.Parent = Option
			Checkbox.BackgroundColor3 = disabledColor
			Checkbox.BorderSizePixel = 0
			Checkbox.Size = UDim2.new(0, 15, 0, 15)
			Checkbox.Position = UDim2.new(0, 5, 0.5, -7.5)

			local CheckboxCorner = Instance.new("UICorner")
			CheckboxCorner.CornerRadius = UDim.new(0, 3)
			CheckboxCorner.Parent = Checkbox

			-- Fixed checkmark with proper centering
			--[[
				local Checkmark = Instance.new("ImageLabel")
				Checkmark.Name = "Checkmark"
				Checkmark.Parent = Checkbox
				Checkmark.BackgroundTransparency = 1.000
				Checkmark.Size = UDim2.new(1, 0, 1, 0)
				Checkmark.Image = "rbxassetid://3926309567"
				Checkmark.ImageRectOffset = Vector2.new(784, 420)
				Checkmark.ImageRectSize = Vector2.new(48, 48)
				Checkmark.ImageColor3 = Color3.fromRGB(0, 170, 255)
				Checkmark.Visible = false
				]]

			local Icon = Instance.new("ImageLabel", Checkbox)
			Icon.Name = "Icon"
			Icon.AnchorPoint = Vector2.new(0.5, 0.5)
			Icon.BackgroundTransparency = 1.000
			Icon.Position = UDim2.new(0.5, 0, 0.5, 0)
			Icon.Size = UDim2.new(0, 20, 0, 20)
			Icon.Image = "http://www.roblox.com/asset/?id=13319773302"
			Icon.ImageColor3 = Color3.fromRGB(0, 0, 0)
			Icon.ImageTransparency = 1.000

			local UIScale = Instance.new("UIScale", Icon)
			UIScale.Scale = 0.800


			if showTooltips then
				local Tooltip = Instance.new("TextLabel")
				Tooltip.Name = "Tooltip"
				Tooltip.Parent = Option
				Tooltip.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				Tooltip.BackgroundTransparency = 0.5
				Tooltip.BorderSizePixel = 0
				Tooltip.Size = UDim2.new(1, 0, 0, 20)
				Tooltip.Position = UDim2.new(0, 0, -1, -20)
				Tooltip.Text = optionText
				Tooltip.TextColor3 = Color3.fromRGB(255, 255, 255)
				Tooltip.TextSize = 10
				Tooltip.Visible = false

				Option.MouseEnter:Connect(function()
					Tooltip.Visible = true
				end)

				Option.MouseLeave:Connect(function()
					Tooltip.Visible = false
				end)
			end

			Option.MouseButton1Click:Connect(function()
				if table.find(selectedOptions, optionText) then
					-- Remove selection
					table.remove(selectedOptions, table.find(selectedOptions, optionText))
					game:GetService("TweenService"):Create(Icon, TweenInfo.new(0.1), {
						ImageTransparency = 1
					}):Play()
					Checkbox.BackgroundColor3 = disabledColor
				else
					-- Add selection
					table.insert(selectedOptions, optionText)
					game:GetService("TweenService"):Create(Icon, TweenInfo.new(0.1), {
						ImageTransparency = 0
					}):Play()
					Checkbox.BackgroundColor3 = selectedColor
				end

				-- **If no selection and only one option, force select it**
				if #selectedOptions == 0 and #options == 1 then
					table.insert(selectedOptions, options[1])
					-- Update checkbox visual for the only option:
					local onlyOption = List:FindFirstChild("Option1")
					if onlyOption then
						local cb = onlyOption:FindFirstChild("Checkbox")
						local icon = cb and cb:FindFirstChild("Icon")
						if icon then
							game:GetService("TweenService"):Create(icon, TweenInfo.new(0.1), {
								ImageTransparency = 0
							}):Play()
						end
						cb.BackgroundColor3 = selectedColor
					end
				end

				-- Update title text
				if #selectedOptions == 0 then
					Title.Text = dropdownName
				elseif #selectedOptions == 1 then
					Title.Text = selectedOptions[1]
				else
					Title.Text = dropdownName.." ("..#selectedOptions..")"
				end

				if callback then
					callback(selectedOptions)
				end
			end)


			Option.MouseEnter:Connect(function()
				Option.BackgroundColor3 = hoverColor
			end)

			Option.MouseLeave:Connect(function()
				Option.BackgroundColor3 = defaultColor
			end)
		end

		Dropdown.MouseButton1Click:Connect(function()
			if isOpen then
				Icon.Image = "rbxassetid://6031091000"
				List.Visible = false
				SearchBox.Visible = false
				isOpen = false
				openDropdown = nil
			else
				if openDropdown then
					openDropdown:FindFirstChild("List").Visible = false
					openDropdown:FindFirstChild("SearchBox").Visible = false
				end
				Icon.Image = "rbxassetid://6031090999"

				List.Visible = true
				SearchBox.Visible = true
				SearchBox:CaptureFocus()
				isOpen = true
				openDropdown = Dropdown
			end
		end)

		function MdrFunction:Update(newOptions)
			assert(type(newOptions) == "table" and #newOptions > 0, "Options should be a non-empty table.")

			-- Clear existing options
			for _, child in ipairs(List:GetChildren()) do
				if child:IsA("TextButton") then
					child:Destroy()
				end
			end

			-- Update options
			options = newOptions
			selectedOptions = {}
			Title.Text = dropdownName
			List.CanvasSize = UDim2.new(0, 0, 0, #options * 28 + 5)
			List.Size = UDim2.new(1, -20, 0, math.min(maxVisibleOptions * 28 + 5, #options * 28 + 5))

			-- Create new options
			for i, optionText in ipairs(options) do
				local Option = Instance.new("TextButton")
				Option.Name = "Option" .. i
				Option.Parent = List
				Option.BackgroundColor3 = defaultColor
				Option.BorderSizePixel = 0
				Option.Size = UDim2.new(1, 0, 0, 25)
				Option.AutoButtonColor = false
				Option.Text = ""
				Option.TextColor3 = Color3.fromRGB(214, 214, 214)
				Option.TextWrapped = true
				Option.TextSize = customFontSize
				Option.TextXAlignment = Enum.TextXAlignment.Left

				local OptionText = Instance.new("TextLabel")
				OptionText.Name = "OptionText"
				OptionText.Parent = Option
				OptionText.BackgroundTransparency = 1
				OptionText.Size = UDim2.new(1, -30, 1, 0)
				OptionText.Position = UDim2.new(0, 30, 0, 0)
				OptionText.Text = optionText
				OptionText.TextColor3 = Color3.fromRGB(214, 214, 214)
				OptionText.TextSize = customFontSize
				OptionText.Font = customFont
				OptionText.TextXAlignment = Enum.TextXAlignment.Left

				local Checkbox = Instance.new("Frame")
				Checkbox.Name = "Checkbox"
				Checkbox.Parent = Option
				Checkbox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				Checkbox.BorderSizePixel = 0
				Checkbox.Size = UDim2.new(0, 15, 0, 15)
				Checkbox.Position = UDim2.new(0, 5, 0.5, -7.5)

				local CheckboxCorner = Instance.new("UICorner")
				CheckboxCorner.CornerRadius = UDim.new(0, 3)
				CheckboxCorner.Parent = Checkbox
			--[[
				local Checkmark = Instance.new("ImageLabel")
				Checkmark.Name = "Checkmark"
				Checkmark.Parent = Checkbox
				Checkmark.BackgroundTransparency = 1.000
				Checkmark.Size = UDim2.new(1, 0, 1, 0)
				Checkmark.Image = "rbxassetid://3926309567"
				Checkmark.ImageRectOffset = Vector2.new(784, 420)
				Checkmark.ImageRectSize = Vector2.new(48, 48)
				Checkmark.ImageColor3 = Color3.fromRGB(0, 170, 255)
				Checkmark.Visible = false
				]]

				local Icon = Instance.new("ImageLabel", Checkbox)
				Icon.Name = "Icon"
				Icon.AnchorPoint = Vector2.new(0.5, 0.5)
				Icon.BackgroundTransparency = 1.000
				Icon.Position = UDim2.new(0.5, 0, 0.5, 0)
				Icon.Size = UDim2.new(0, 20, 0, 20)
				Icon.Image = "rbxassetid://3926309567"
				Icon.ImageColor3 = Color3.fromRGB(0, 0, 0)
				Icon.ImageTransparency = 1.000

				Option.MouseButton1Click:Connect(function()
					if table.find(selectedOptions, optionText) then
						-- Remove selection
						table.remove(selectedOptions, table.find(selectedOptions, optionText))
						game:GetService("TweenService"):Create(Icon, TweenInfo.new(0.1), {
							ImageTransparency = 1
						}):Play()
						Checkbox.BackgroundColor3 = disabledColor
					else
						-- Add selection
						table.insert(selectedOptions, optionText)
						game:GetService("TweenService"):Create(Icon, TweenInfo.new(0.1), {
							ImageTransparency = 0
						}):Play()
						Checkbox.BackgroundColor3 = selectedColor
					end

					-- **If no selection and only one option, force select it**
					if #selectedOptions == 0 and #options == 1 then
						table.insert(selectedOptions, options[1])
						-- Update checkbox visual for the only option:
						local onlyOption = List:FindFirstChild("Option1")
						if onlyOption then
							local cb = onlyOption:FindFirstChild("Checkbox")
							local icon = cb and cb:FindFirstChild("Icon")
							if icon then
								game:GetService("TweenService"):Create(icon, TweenInfo.new(0.1), {
									ImageTransparency = 0
								}):Play()
							end
							cb.BackgroundColor3 = selectedColor
						end
					end

					-- Update title text
					if #selectedOptions == 0 then
						Title.Text = dropdownName
					elseif #selectedOptions == 1 then
						Title.Text = selectedOptions[1]
					else
						Title.Text = dropdownName.." ("..#selectedOptions..")"
					end

					if callback then
						callback(selectedOptions)
					end
				end)

			end
		end

		function MdrFunction:SetSel(selected)
			selectedOptions = selected or {}

			if #selectedOptions == 0 and #options == 1 then
				selectedOptions = {options[1]}
			end

			
			for i, option in ipairs(options) do
				local optionButton = List:FindFirstChild("Option" .. i)
				if optionButton then
					local Checkbox = optionButton:FindFirstChild("Checkbox")
					local Icon = Checkbox and Checkbox:FindFirstChild("Icon")
					if table.find(selectedOptions, option) then
						if Icon then
							Icon.ImageTransparency = 0
						end
						Checkbox.BackgroundColor3 = selectedColor
					else
						if Icon then
							Icon.ImageTransparency = 1
						end
						Checkbox.BackgroundColor3 = disabledColor
					end
				end
			end

			-- Update title
			if #selectedOptions == 0 then
				Title.Text = dropdownName
			elseif #selectedOptions == 1 then
				Title.Text = selectedOptions[1]
			else
				Title.Text = dropdownName.." ("..#selectedOptions..")"
			end

			if callback then
				callback(selectedOptions)
			end
		end


		function MdrFunction:GetSel()
			return selectedOptions
		end

		return MdrFunction
	end









	function Library:Dropdown(tab, dropdownName, options, callback, settings)
		settings = settings or {}
		local DropFunction = {}
		-- Settings with defaults
		local hoverColor = settings.hoverColor or Color3.fromRGB(75, 75, 75)
		local disabledColor = settings.disabledColor or Color3.fromRGB(100, 100, 100)
		local selectedColor = settings.selectedColor or Color3.fromRGB(85, 85, 85)
		local defaultColor = Color3.fromRGB(55, 55, 55)
		local searchPlaceholder = settings.searchPlaceholder or "Search..."
		local customFont = settings.customFont or Enum.Font.GothamMedium
		local customFontSize = settings.customFontSize or 12
		local showTooltips = settings.showTooltips or true
		local showIcons = settings.showIcons or false
		local maxVisibleOptions = settings.maxVisibleOptions or 5

		-- Validate options
		assert(type(options) == "table" and #options > 0, "Options should be a non-empty table.")

		local isOpen = false
		local openDropdown = nil
		local selectedOption = nil

		-- Main Dropdown Button
		local Dropdown = Instance.new("TextButton")
		Dropdown.Name = "Dropdown"
		Dropdown.Parent = tab
		Dropdown.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		Dropdown.BorderColor3 = Color3.fromRGB(27, 42, 53)
		Dropdown.Position = UDim2.new(0, 0, 0.439393938, 0)
		Dropdown.Size = UDim2.new(1, -20, 0, 31)
		Dropdown.AutoButtonColor = false
		Dropdown.Text = ""
		Dropdown.TextColor3 = Color3.fromRGB(193, 193, 193)
		Dropdown.TextSize = customFontSize
		Dropdown.Font = customFont

		local UIStroke = Instance.new("UIStroke")
		UIStroke.Parent = Dropdown
		UIStroke.Color = Color3.fromRGB(50, 50, 50)
		UIStroke.Thickness = 1

		local UICorner = Instance.new("UICorner")
		UICorner.CornerRadius = UDim.new(0, 5)
		UICorner.Parent = Dropdown

		-- Main Frame
		local Main = Instance.new("Frame")
		Main.Name = "Main"
		Main.Parent = Dropdown
		Main.BackgroundTransparency = 1.000
		Main.Size = UDim2.new(1, 0, 1, 0)

		-- Title
		local Title = Instance.new("TextLabel")
		Title.Name = "Title"
		Title.Parent = Main
		Title.BackgroundTransparency = 1.000
		Title.Size = UDim2.new(1, -35, 1, 0)
		Title.Font = customFont
		Title.TextWrapped = true     

		Title.Text = dropdownName
		Title.TextColor3 = Color3.fromRGB(193, 193, 193)
		Title.TextSize = customFontSize
		Title.TextXAlignment = Enum.TextXAlignment.Left

		local UIPadding = Instance.new("UIPadding")
		UIPadding.Parent = Title
		UIPadding.PaddingLeft = UDim.new(0, 10)

		-- Icon
		local Icon = Instance.new("ImageLabel")
		Icon.Name = "Icon"
		Icon.Parent = Main
		Icon.AnchorPoint = Vector2.new(0.5, 0.5)
		Icon.BackgroundTransparency = 1.000
		Icon.Position = UDim2.new(1, -15, 0.5, 0)
		Icon.Size = UDim2.new(0, 20, 0, 20)
		Icon.Image = "rbxassetid://6031091000" -- Close icon
		Icon.ImageColor3 = Color3.fromRGB(109, 109, 109)

		-- Search Box
		local SearchBox = Instance.new("TextBox")
		SearchBox.Name = "SearchBox"
		SearchBox.Parent = tab
		SearchBox.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
		SearchBox.BorderSizePixel = 0
		SearchBox.Position = UDim2.new(0, 0, 0, Dropdown.AbsolutePosition.Y + Dropdown.AbsoluteSize.Y + 5)
		SearchBox.Size = UDim2.new(1, -20, 0, 25)
		SearchBox.Text = ""
		SearchBox.PlaceholderText = searchPlaceholder
		SearchBox.TextColor3 = Color3.fromRGB(214, 214, 214)
		SearchBox.TextSize = customFontSize
		SearchBox.ClearTextOnFocus = false
		SearchBox.Visible = false

		local SearchCorner = Instance.new("UICorner")
		SearchCorner.CornerRadius = UDim.new(0, 5)
		SearchCorner.Parent = SearchBox

		-- Options List
		local List = Instance.new("ScrollingFrame")
		List.Name = "List"
		List.Parent = tab
		List.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		List.BorderSizePixel = 0
		List.Position = UDim2.new(0, 0, 0, SearchBox.AbsolutePosition.Y + SearchBox.AbsoluteSize.Y + 5)
		List.Size = UDim2.new(1, -20, 0, math.min(maxVisibleOptions * 28, #options * 28))
		List.ClipsDescendants = true
		List.CanvasSize = UDim2.new(0, 0, 0, #options * 28)
		List.ScrollBarThickness = 6
		List.ScrollingDirection = Enum.ScrollingDirection.Y
		List.Visible = false

		local ListCorner = Instance.new("UICorner")
		ListCorner.CornerRadius = UDim.new(0, 5)
		ListCorner.Parent = List

		local UIListLayout = Instance.new("UIListLayout")
		UIListLayout.Parent = List
		UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		UIListLayout.Padding = UDim.new(0, 3)

		local function updateTitle()
			if selectedOption then
				Title.Text = selectedOption
			else
				Title.Text = dropdownName
			end
		end

		local function toggleDropdown(state)
			if state == nil then
				state = not isOpen
			end

			if state then
				-- Close any other open dropdowns
				if openDropdown and openDropdown ~= Dropdown then
					openDropdown.List.Visible = false
					openDropdown.SearchBox.Visible = false
					openDropdown.Icon.Image = "rbxassetid://6031091000"
				end

				-- Update positions
				SearchBox.Position = UDim2.new(0, 0, 0, Dropdown.AbsolutePosition.Y + Dropdown.AbsoluteSize.Y + 5)
				List.Position = UDim2.new(0, 0, 0, SearchBox.AbsolutePosition.Y + SearchBox.AbsoluteSize.Y + 5)

				-- Show dropdown
				Icon.Image = "rbxassetid://6031090999" -- Open icon
				SearchBox.Visible = true
				List.Visible = true
				SearchBox:CaptureFocus()
				isOpen = true
				openDropdown = Dropdown
			else
				-- Hide dropdown
				Icon.Image = "rbxassetid://6031091000" -- Close icon
				SearchBox.Visible = false
				List.Visible = false
				isOpen = false
				openDropdown = nil
			end
		end

		-- Create option buttons
		local function createOptions()
			for _, child in ipairs(List:GetChildren()) do
				if child:IsA("TextButton") then
					child:Destroy()
				end
			end

			for i, optionText in ipairs(options) do
				local Option = Instance.new("TextButton")
				Option.Name = "Option"..i
				Option.Parent = List
				Option.BackgroundColor3 = defaultColor
				Option.BorderSizePixel = 0
				Option.Size = UDim2.new(1, 0, 0, 25)
				Option.AutoButtonColor = false
				Option.Text = optionText
				Option.TextColor3 = Color3.fromRGB(214, 214, 214)
				Option.TextSize = customFontSize
				Option.Font = customFont

				local OptionCorner = Instance.new("UICorner")
				OptionCorner.CornerRadius = UDim.new(0, 3)
				OptionCorner.Parent = Option

				-- Selection indicator
				local SelectionIndicator = Instance.new("Frame")
				SelectionIndicator.Name = "SelectionIndicator"
				SelectionIndicator.Parent = Option
				SelectionIndicator.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
				SelectionIndicator.BorderSizePixel = 0
				SelectionIndicator.Size = UDim2.new(0, 3, 1, 0)
				SelectionIndicator.Visible = false

				local IndicatorCorner = Instance.new("UICorner")
				IndicatorCorner.CornerRadius = UDim.new(0, 3)
				IndicatorCorner.Parent = SelectionIndicator

				-- Set as selected if matches current selection
				if optionText == selectedOption then
					SelectionIndicator.Visible = true
					Option.BackgroundColor3 = selectedColor
				end

				Option.MouseButton1Click:Connect(function()
				--	if optionText ~= selectedOption then
						-- Otherwise, select this option
						selectedOption = optionText
						SelectionIndicator.Visible = true
						Option.BackgroundColor3 = selectedColor

						-- Deselect all other options visually
						for _, opt in ipairs(List:GetChildren()) do
							if opt:IsA("TextButton") and opt ~= Option then
								opt.BackgroundColor3 = defaultColor
								opt.SelectionIndicator.Visible = false
							end
						end
				--	end

					updateTitle() -- Update the main dropdown title

					if callback then
						callback(selectedOption)
					end

					toggleDropdown(false)
				end)

				Option.MouseEnter:Connect(function()
					if Option.Text ~= selectedOption then
						Option.BackgroundColor3 = hoverColor
					end
				end)

				Option.MouseLeave:Connect(function()
					if Option.Text ~= selectedOption then
						Option.BackgroundColor3 = defaultColor
					end
				end)
			end
		end

		-- Search functionality
		SearchBox:GetPropertyChangedSignal("Text"):Connect(function()
			local searchText = string.lower(SearchBox.Text)

			for _, option in ipairs(List:GetChildren()) do
				if option:IsA("TextButton") then
					option.Visible = searchText == "" or string.find(string.lower(option.Text), searchText)
				end
			end
		end)

		-- Initialize options
		createOptions()
		updateTitle()

		-- Dropdown click handler
		Dropdown.MouseButton1Click:Connect(function()
			toggleDropdown()
		end)

		-- Close dropdown when clicking outside
		game:GetService("UserInputService").InputBegan:Connect(function(input, processed)
			if not processed and input.UserInputType == Enum.UserInputType.MouseButton1 then
				if isOpen and not Dropdown:IsDescendantOf(input:GetMouseTarget()) 
					and not List:IsDescendantOf(input:GetMouseTarget())
					and not SearchBox:IsDescendantOf(input:GetMouseTarget()) then
					toggleDropdown(false)
				end
			end
		end)

		-- Dropdown methods
		function DropFunction:Update(newOptions)
			assert(type(newOptions) == "table" and #newOptions > 0, "Options should be a non-empty table.")

			options = newOptions
			selectedOption = nil
			updateTitle()
			createOptions()

			-- Update sizes
			List.Size = UDim2.new(1, -20, 0, math.min(maxVisibleOptions * 28, #options * 28))
			List.CanvasSize = UDim2.new(0, 0, 0, #options * 28)
		end

		function DropFunction:Setdrop(optionText)
			if table.find(options, optionText) then
				selectedOption = optionText
				updateTitle()

				-- Update visual state
				for _, option in ipairs(List:GetChildren()) do
					if option:IsA("TextButton") then
						if option.Text == optionText then
							option.BackgroundColor3 = selectedColor
							option.SelectionIndicator.Visible = true
						else
							option.BackgroundColor3 = defaultColor
							option.SelectionIndicator.Visible = false
						end
					end
				end

				if callback then
					callback(selectedOption)
				end
			end
		end

		function DropFunction:GetSel()
			return selectedOption
		end

		return DropFunction
	end


	return Library
end
return Library


--UDim2.new(0.5, 0, 0.5, 0)
